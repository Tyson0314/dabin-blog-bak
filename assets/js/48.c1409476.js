(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{673:function(r,t,a){"use strict";a.r(t);var e=a(14),s=Object(e.a)({},(function(){var r=this,t=r.$createElement,a=r._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[a("h2",{attrs:{id:"说说你对-springmvc-的理解"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#说说你对-springmvc-的理解"}},[r._v("#")]),r._v(" 说说你对 SpringMVC 的理解")]),r._v(" "),a("p",[r._v("SpringMVC是一种基于 Java 的实现MVC设计模型的请求驱动类型的轻量级Web框架，属于Spring框架的一个模块。")]),r._v(" "),a("p",[r._v("它通过一套注解，让一个简单的Java类成为处理请求的控制器，而无须实现任何接口。同时它还支持RESTful编程风格的请求。")]),r._v(" "),a("h2",{attrs:{id:"什么是mvc模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是mvc模式"}},[r._v("#")]),r._v(" 什么是MVC模式？")]),r._v(" "),a("p",[r._v("MVC的全名是"),a("code",[r._v("Model View Controller")]),r._v("，是模型(model)－视图(view)－控制器(controller)的缩写，是一种软件设计典范。它是用一种业务逻辑、数据与界面显示分离的方法来组织代码，将众多的业务逻辑聚集到一个部件里面，在需要改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑，达到减少编码的时间。")]),r._v(" "),a("p",[r._v("View，视图是指用户看到并与之交互的界面。比如由html元素组成的网页界面，或者软件的客户端界面。MVC的好处之一在于它能为应用程序处理很多不同的视图。在视图中其实没有真正的处理发生，它只是作为一种输出数据并允许用户操纵的方式。")]),r._v(" "),a("p",[r._v("model，模型是指模型表示业务规则。在MVC的三个部件中，模型拥有最多的处理任务。被模型返回的数据是中立的，模型与数据格式无关，这样一个模型能为多个视图提供数据，由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。")]),r._v(" "),a("p",[r._v("controller，控制器是指控制器接受用户的输入并调用模型和视图去完成用户的需求，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后再确定用哪个视图来显示返回的数据。")]),r._v(" "),a("h2",{attrs:{id:"springmvc-有哪些优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-有哪些优点"}},[r._v("#")]),r._v(" SpringMVC 有哪些优点？")]),r._v(" "),a("ol",[a("li",[r._v("与 Spring 集成使用非常方便，生态好。")]),r._v(" "),a("li",[r._v("配置简单，快速上手。")]),r._v(" "),a("li",[r._v("支持 RESTful 风格。")]),r._v(" "),a("li",[r._v("支持各种视图技术，支持各种请求资源映射策略。")])]),r._v(" "),a("h2",{attrs:{id:"spring-mvc和struts的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc和struts的区别"}},[r._v("#")]),r._v(" Spring MVC和Struts的区别")]),r._v(" "),a("ol",[a("li",[a("p",[r._v("Spring MVC是基于方法开发，Struts2是基于类开发的。")]),r._v(" "),a("ul",[a("li",[r._v("Spring MVC会将用户请求的URL路径信息与Controller的某个方法进行映射，所有请求参数会注入到对应方法的形参上，生成Handler对象，对象中只有一个方法；")]),r._v(" "),a("li",[r._v("Struts每处理一次请求都会实例一个Action，Action类的所有方法使用的请求参数都是Action类中的成员变量，随着方法增多，整个Action也会变得混乱。")])])]),r._v(" "),a("li",[a("p",[r._v("Spring MVC支持单例开发模式，Struts只能使用多例")]),r._v(" "),a("ul",[a("li",[r._v("Struts由于只能通过类的成员变量接收参数，故只能使用多例。")])])]),r._v(" "),a("li",[a("p",[r._v("Struts2 的核心是基于一个Filter即StrutsPreparedAndExcuteFilter，Spring MVC的核心是基于一个Servlet即DispatcherServlet(前端控制器)。")])]),r._v(" "),a("li",[a("p",[r._v("Struts处理速度稍微比Spring MVC慢，Struts使用了Struts标签，加载数据较慢。")])])]),r._v(" "),a("h2",{attrs:{id:"spring-mvc的工作原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc的工作原理"}},[r._v("#")]),r._v(" Spring MVC的工作原理")]),r._v(" "),a("p",[r._v("Spring MVC的工作原理如下：")]),r._v(" "),a("ol",[a("li",[r._v("DispatcherServlet 接收用户的请求")]),r._v(" "),a("li",[r._v("找到用于处理request的 handler 和 Interceptors，构造成 HandlerExecutionChain 执行链")]),r._v(" "),a("li",[r._v("找到 handler 相对应的 HandlerAdapter")]),r._v(" "),a("li",[r._v("执行所有注册拦截器的preHandler方法")]),r._v(" "),a("li",[r._v("调用 HandlerAdapter 的 handle() 方法处理请求，返回 ModelAndView")]),r._v(" "),a("li",[r._v("倒序执行所有注册拦截器的postHandler方法")]),r._v(" "),a("li",[r._v("请求视图解析和视图渲染")])]),r._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/spring_mvc%E5%8E%9F%E7%90%86.png",alt:""}})]),r._v(" "),a("h2",{attrs:{id:"spring-mvc的主要组件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc的主要组件"}},[r._v("#")]),r._v(" Spring MVC的主要组件？")]),r._v(" "),a("ul",[a("li",[r._v("前端控制器（DispatcherServlet）：接收用户请求，给用户返回结果。")]),r._v(" "),a("li",[r._v("处理器映射器（HandlerMapping）：根据请求的url路径，通过注解或者xml配置，寻找匹配的Handler。")]),r._v(" "),a("li",[r._v("处理器适配器（HandlerAdapter）：Handler 的适配器，调用 handler 的方法处理请求。")]),r._v(" "),a("li",[r._v("处理器（Handler）：执行相关的请求处理逻辑，并返回相应的数据和视图信息，将其封装到ModelAndView对象中。")]),r._v(" "),a("li",[r._v("视图解析器（ViewResolver）：将逻辑视图名解析成真正的视图View。")]),r._v(" "),a("li",[r._v("视图（View）：接口类，实现类可支持不同的View类型（JSP、FreeMarker、Excel等）。")])]),r._v(" "),a("h2",{attrs:{id:"spring-mvc的常用注解由有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc的常用注解由有哪些"}},[r._v("#")]),r._v(" Spring MVC的常用注解由有哪些？")]),r._v(" "),a("ul",[a("li",[r._v("@Controller：用于标识此类的实例是一个控制器。")]),r._v(" "),a("li",[r._v("@RequestMapping：映射Web请求（访问路径和参数）。")]),r._v(" "),a("li",[r._v("@ResponseBody：注解返回数据而不是返回页面")]),r._v(" "),a("li",[r._v("@RequestBody：注解实现接收 http 请求的 json 数据，将 json 数据转换为 java 对象。")]),r._v(" "),a("li",[r._v("@PathVariable：获得URL中路径变量中的值")]),r._v(" "),a("li",[r._v("@RestController：@Controller+@ResponseBody")]),r._v(" "),a("li",[r._v("@ExceptionHandler标识一个方法为全局异常处理的方法。")])]),r._v(" "),a("h2",{attrs:{id:"controller-注解有什么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#controller-注解有什么用"}},[r._v("#")]),r._v(" @Controller 注解有什么用？")]),r._v(" "),a("p",[a("code",[r._v("@Controller")]),r._v(" 注解标记一个类为 Spring Web MVC 控制器。Spring MVC 会将扫描到该注解的类，然后扫描这个类下面带有 "),a("code",[r._v("@RequestMapping")]),r._v(" 注解的方法，根据注解信息，为这个方法生成一个对应的处理器对象，在上面的 HandlerMapping 和 HandlerAdapter组件中讲到过。")]),r._v(" "),a("p",[r._v("当然，除了添加 "),a("code",[r._v("@Controller")]),r._v(" 注解这种方式以外，你还可以实现 Spring MVC 提供的 "),a("code",[r._v("Controller")]),r._v(" 或者 "),a("code",[r._v("HttpRequestHandler")]),r._v(" 接口，对应的实现类也会被作为一个处理器对象")]),r._v(" "),a("h2",{attrs:{id:"requestmapping-注解有什么用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requestmapping-注解有什么用"}},[r._v("#")]),r._v(" @RequestMapping 注解有什么用？")]),r._v(" "),a("p",[a("code",[r._v("@RequestMapping")]),r._v(" 注解，用于配置处理器的 HTTP 请求方法，URI等信息，这样才能将请求和方法进行映射。这个注解可以作用于类上面，也可以作用于方法上面，在类上面一般是配置这个控制器的 URI 前缀。")]),r._v(" "),a("h2",{attrs:{id:"restcontroller-和-controller-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#restcontroller-和-controller-有什么区别"}},[r._v("#")]),r._v(" @RestController 和 @Controller 有什么区别？")]),r._v(" "),a("p",[a("code",[r._v("@RestController")]),r._v(" 注解，在 "),a("code",[r._v("@Controller")]),r._v(" 基础上，增加了 "),a("code",[r._v("@ResponseBody")]),r._v(" 注解，更加适合目前前后端分离的架构下，提供 Restful API ，返回 JSON 数据格式。")]),r._v(" "),a("h2",{attrs:{id:"requestmapping-和-getmapping-注解有什么不同"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requestmapping-和-getmapping-注解有什么不同"}},[r._v("#")]),r._v(" @RequestMapping 和 @GetMapping 注解有什么不同？")]),r._v(" "),a("ol",[a("li",[a("code",[r._v("@RequestMapping")]),r._v("：可注解在类和方法上；"),a("code",[r._v("@GetMapping")]),r._v(" 仅可注册在方法上")]),r._v(" "),a("li",[a("code",[r._v("@RequestMapping")]),r._v("：可进行 GET、POST、PUT、DELETE 等请求方法；"),a("code",[r._v("@GetMapping")]),r._v(" 是 "),a("code",[r._v("@RequestMapping")]),r._v(" 的 GET 请求方法的特例。")])]),r._v(" "),a("h2",{attrs:{id:"requestparam-和-pathvariable-两个注解的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requestparam-和-pathvariable-两个注解的区别"}},[r._v("#")]),r._v(" @RequestParam 和 @PathVariable 两个注解的区别")]),r._v(" "),a("p",[r._v("两个注解都用于方法参数，获取参数值的方式不同，"),a("code",[r._v("@RequestParam")]),r._v(" 注解的参数从请求携带的参数中获取，而 "),a("code",[r._v("@PathVariable")]),r._v(" 注解从请求的 URI 中获取")]),r._v(" "),a("h2",{attrs:{id:"requestbody和-requestparam的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#requestbody和-requestparam的区别"}},[r._v("#")]),r._v(" @RequestBody和@RequestParam的区别")]),r._v(" "),a("p",[r._v('@RequestBody一般处理的是在ajax请求中声明contentType: "application/json; charset=utf-8"时候。也就是json数据或者xml数据。')]),r._v(" "),a("p",[r._v("@RequestParam一般就是在ajax里面没有声明contentType的时候，为默认的"),a("code",[r._v("x-www-form-urlencoded")]),r._v("格式时。")]),r._v(" "),a("h2",{attrs:{id:"spring-mvc的异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc的异常处理"}},[r._v("#")]),r._v(" Spring MVC的异常处理")]),r._v(" "),a("p",[r._v("可以将异常抛给Spring框架，由Spring框架来处理；我们只需要配置简单的异常处理器，在异常处理器中添视图页面即可。")]),r._v(" "),a("ul",[a("li",[r._v("使用系统定义好的异常处理器 SimpleMappingExceptionResolver")]),r._v(" "),a("li",[r._v("使用自定义异常处理器")]),r._v(" "),a("li",[r._v("使用异常处理注解")])]),r._v(" "),a("h2",{attrs:{id:"springmvc-用什么对象从后台向前台传递数据的"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc-用什么对象从后台向前台传递数据的"}},[r._v("#")]),r._v(" SpringMVC 用什么对象从后台向前台传递数据的？")]),r._v(" "),a("ol",[a("li",[r._v("将数据绑定到 request；")]),r._v(" "),a("li",[r._v("返回 ModelAndView；")]),r._v(" "),a("li",[r._v("通过ModelMap对象，可以在这个对象里面调用put方法，把对象加到里面，前端就可以通过el表达式拿到；")]),r._v(" "),a("li",[r._v("绑定数据到 Session中。")])]),r._v(" "),a("h2",{attrs:{id:"springmvc的controller是不是单例模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc的controller是不是单例模式"}},[r._v("#")]),r._v(" SpringMvc的Controller是不是单例模式？")]),r._v(" "),a("p",[r._v("单例模式。在多线程访问的时候有线程安全问题，解决方案是在控制器里面不要写可变状态量，如果需要使用这些可变状态，可以使用ThreadLocal，为每个线程单独生成一份变量副本，独立操作，互不影响。")]),r._v(" "),a("h2",{attrs:{id:"介绍下-spring-mvc-拦截器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍下-spring-mvc-拦截器"}},[r._v("#")]),r._v(" 介绍下 Spring MVC 拦截器？")]),r._v(" "),a("p",[r._v("Spring MVC 拦截器对应HandlerInterceor接口，该接口位于org.springframework.web.servlet的包中，定义了三个方法，若要实现该接口，就要实现其三个方法：")]),r._v(" "),a("ol",[a("li",[a("strong",[r._v("前置处理（preHandle()方法）")]),r._v("：该方法在执行控制器方法之前执行。返回值为Boolean类型，如果返回false，表示拦截请求，不再向下执行，如果返回true，表示放行，程序继续向下执行（如果后面没有其他Interceptor，就会执行controller方法）。所以此方法可对请求进行判断，决定程序是否继续执行，或者进行一些初始化操作及对请求进行预处理。")]),r._v(" "),a("li",[a("strong",[r._v("后置处理（postHandle()方法）")]),r._v("：该方法在执行控制器方法调用之后，且在返回ModelAndView之前执行。由于该方法会在DispatcherServlet进行返回视图渲染之前被调用，所以此方法多被用于处理返回的视图，可通过此方法对请求域中的模型和视图做进一步的修改。")]),r._v(" "),a("li",[a("strong",[r._v("已完成处理（afterCompletion()方法）")]),r._v("：该方法在执行完控制器之后执行，由于是在Controller方法执行完毕后执行该方法，所以该方法适合进行一些资源清理，记录日志信息等处理操作。")])]),r._v(" "),a("p",[r._v("可以通过拦截器进行权限检验，参数校验，记录日志等操作")]),r._v(" "),a("h2",{attrs:{id:"springmvc怎么配置拦截器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#springmvc怎么配置拦截器"}},[r._v("#")]),r._v(" SpringMvc怎么配置拦截器？")]),r._v(" "),a("p",[r._v("有两种写法，一种是实现HandlerInterceptor接口，另外一种是继承适配器类，接着在接口方法当中，实现处理逻辑；然后在SpringMvc的配置文件中配置拦截器即可：")]),r._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("--")]),r._v(" 配置"),a("span",{pre:!0,attrs:{class:"token class-name"}},[r._v("SpringMvc")]),r._v("的拦截器 "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(">")]),r._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("<")]),r._v("mvc"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(":")]),r._v("interceptors"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(">")]),r._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("<")]),r._v("bean id"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[r._v('"myInterceptor"')]),r._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[r._v('"com.dabin.MyHandlerInterceptor"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("bean"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(">")]),r._v("\n \n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("!")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("--")]),r._v(" 只拦截部分请求 "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(">")]),r._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("<")]),r._v("mvc"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(":")]),r._v("interceptor"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(">")]),r._v("\n       "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("<")]),r._v("mvc"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(":")]),r._v("mapping path"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[r._v('"/xxx.do"')]),r._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(">")]),r._v("\n       "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("<")]),r._v("bean "),a("span",{pre:!0,attrs:{class:"token keyword"}},[r._v("class")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[r._v('"com.dabin.MyHandlerInterceptorAdapter"')]),r._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(">")]),r._v("\n    "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("mvc"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(":")]),r._v("interceptor"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(">")]),r._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("mvc"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(":")]),r._v("interceptors"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v(">")]),r._v("\n")])]),r._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[r._v("1")]),a("br"),a("span",{staticClass:"line-number"},[r._v("2")]),a("br"),a("span",{staticClass:"line-number"},[r._v("3")]),a("br"),a("span",{staticClass:"line-number"},[r._v("4")]),a("br"),a("span",{staticClass:"line-number"},[r._v("5")]),a("br"),a("span",{staticClass:"line-number"},[r._v("6")]),a("br"),a("span",{staticClass:"line-number"},[r._v("7")]),a("br"),a("span",{staticClass:"line-number"},[r._v("8")]),a("br"),a("span",{staticClass:"line-number"},[r._v("9")]),a("br"),a("span",{staticClass:"line-number"},[r._v("10")]),a("br")])]),a("h2",{attrs:{id:"spring-mvc-的拦截器和-filter-过滤器有什么差别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#spring-mvc-的拦截器和-filter-过滤器有什么差别"}},[r._v("#")]),r._v(" Spring MVC 的拦截器和 Filter 过滤器有什么差别？")]),r._v(" "),a("p",[r._v("有以下几点：")]),r._v(" "),a("ul",[a("li",[a("strong",[r._v("功能相同")]),r._v("：拦截器和 Filter 都能实现相应的功能")]),r._v(" "),a("li",[a("strong",[r._v("容器不同")]),r._v("：拦截器构建在 Spring MVC 体系中；Filter 构建在 Servlet 容器之上")]),r._v(" "),a("li",[a("strong",[r._v("使用便利性不同")]),r._v("：拦截器提供了三个方法，分别在不同的时机执行；过滤器仅提供一个方法")])]),r._v(" "),a("h2",{attrs:{id:"什么是rest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是rest"}},[r._v("#")]),r._v(" 什么是REST?")]),r._v(" "),a("p",[r._v("REST，英文全称，Resource Representational State Transfer，对资源的访问状态的变化通过url的变化表述出来。")]),r._v(" "),a("p",[r._v("Resource："),a("strong",[r._v("资源")]),r._v("。资源是REST架构或者说整个网络处理的核心。")]),r._v(" "),a("p",[r._v("Representational："),a("strong",[r._v("某种表现形式")]),r._v("，比如用JSON，XML，JPEG等。")]),r._v(" "),a("p",[r._v("State Transfer："),a("strong",[r._v("状态变化")]),r._v("。通过HTTP method实现。")]),r._v(" "),a("p",[r._v("REST描述的是在网络中client和server的一种交互形式。用大白话来说，就是"),a("strong",[r._v("通过URL就知道要什么资源，通过HTTP method就知道要干什么，通过HTTP status code就知道结果如何")]),r._v("。")]),r._v(" "),a("p",[r._v("举个例子：")]),r._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[r._v("GET "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("tasks 获取所有任务\nPOST "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("tasks 创建新任务\nGET "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("tasks"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("{")]),r._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("}")]),r._v(" 通过任务id获取任务\nPUT "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("tasks"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("{")]),r._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("}")]),r._v(" 更新任务\nDELETE "),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),r._v("tasks"),a("span",{pre:!0,attrs:{class:"token operator"}},[r._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("{")]),r._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[r._v("}")]),r._v(" 删除任务\n")])]),r._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[r._v("1")]),a("br"),a("span",{staticClass:"line-number"},[r._v("2")]),a("br"),a("span",{staticClass:"line-number"},[r._v("3")]),a("br"),a("span",{staticClass:"line-number"},[r._v("4")]),a("br"),a("span",{staticClass:"line-number"},[r._v("5")]),a("br")])]),a("p",[r._v("GET代表获取一个资源，POST代表添加一个资源，PUT代表修改一个资源，DELETE代表删除一个资源。")]),r._v(" "),a("p",[r._v("server提供的RESTful API中，URL中只使用名词来指定资源，原则上不使用动词。用"),a("code",[r._v("HTTP Status Code")]),r._v("传递server的状态信息。比如最常用的 200 表示成功，500 表示Server内部错误等。")]),r._v(" "),a("h2",{attrs:{id:"使用rest有什么优势呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#使用rest有什么优势呢"}},[r._v("#")]),r._v(" 使用REST有什么优势呢？")]),r._v(" "),a("p",[r._v("第一，"),a("strong",[r._v("风格统一")]),r._v("了，不会出现"),a("code",[r._v("delUser/deleteUser/removeUser")]),r._v("各种命名的代码了。")]),r._v(" "),a("p",[r._v("第二，"),a("strong",[r._v("面向资源")]),r._v("，一目了然，具有自解释性。")]),r._v(" "),a("p",[r._v("第三，"),a("strong",[r._v("充分利用 HTTP 协议本身语义")]),r._v("。")]),r._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/20220612101342.png",alt:""}})])])}),[],!1,null,null,null);t.default=s.exports}}]);