(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{663:function(s,t,a){"use strict";a.r(t);var _=a(14),v=Object(_.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93.jpg",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"事务的四大特性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务的四大特性"}},[s._v("#")]),s._v(" 事务的四大特性？")]),s._v(" "),a("p",[a("strong",[s._v("事务特性ACID")]),s._v("："),a("strong",[s._v("原子性")]),s._v("（"),a("code",[s._v("Atomicity")]),s._v("）、"),a("strong",[s._v("一致性")]),s._v("（"),a("code",[s._v("Consistency")]),s._v("）、"),a("strong",[s._v("隔离性")]),s._v("（"),a("code",[s._v("Isolation")]),s._v("）、"),a("strong",[s._v("持久性")]),s._v("（"),a("code",[s._v("Durability")]),s._v("）。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("原子性")]),s._v("是指事务包含的所有操作要么全部成功，要么全部失败回滚。")]),s._v(" "),a("li",[a("strong",[s._v("一致性")]),s._v("是指一个事务执行之前和执行之后都必须处于一致性状态。比如a与b账户共有1000块，两人之间转账之后无论成功还是失败，它们的账户总和还是1000。")]),s._v(" "),a("li",[a("strong",[s._v("隔离性")]),s._v("。跟隔离级别相关，如"),a("code",[s._v("read committed")]),s._v("，一个事务只能读到已经提交的修改。")]),s._v(" "),a("li",[a("strong",[s._v("持久性")]),s._v("是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。")])]),s._v(" "),a("h2",{attrs:{id:"数据库的三大范式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据库的三大范式"}},[s._v("#")]),s._v(" 数据库的三大范式")]),s._v(" "),a("p",[a("strong",[s._v("第一范式1NF")])]),s._v(" "),a("p",[s._v("确保数据库表字段的原子性。")]),s._v(" "),a("p",[s._v("比如字段 "),a("code",[s._v("userInfo")]),s._v(": "),a("code",[s._v("广东省 10086'")]),s._v(" ，依照第一范式必须拆分成 "),a("code",[s._v("userInfo")]),s._v(": "),a("code",[s._v("广东省")]),s._v(" "),a("code",[s._v("userTel")]),s._v(":"),a("code",[s._v("10086")]),s._v("两个字段。")]),s._v(" "),a("p",[a("strong",[s._v("第二范式2NF")])]),s._v(" "),a("p",[s._v("首先要满足第一范式，另外包含两部分内容，一是表必须有一个主键；二是非主键列必须完全依赖于主键，而不能只依赖于主键的一部分。")]),s._v(" "),a("p",[s._v("举个例子。假定选课关系表为"),a("code",[s._v("student_course")]),s._v("(student_no, student_name, age, course_name, grade, credit)，主键为(student_no, course_name)。其中学分完全依赖于课程名称，姓名年龄完全依赖学号，不符合第二范式，会导致数据冗余（学生选n门课，姓名年龄有n条记录）、插入异常（插入一门新课，因为没有学号，无法保存新课记录）等问题。")]),s._v(" "),a("p",[s._v("应该拆分成三个表：学生："),a("code",[s._v("student")]),s._v("(stuent_no, student_name, 年龄)；课程："),a("code",[s._v("course")]),s._v("(course_name, credit)；选课关系："),a("code",[s._v("student_course_relation")]),s._v("(student_no, course_name, grade)。")]),s._v(" "),a("p",[a("strong",[s._v("第三范式3NF")])]),s._v(" "),a("p",[s._v("首先要满足第二范式，另外非主键列必须直接依赖于主键，不能存在传递依赖。即不能存在：非主键列 A 依赖于非主键列 B，非主键列 B 依赖于主键的情况。")]),s._v(" "),a("p",[s._v('假定学生关系表为Student(student_no, student_name, age, academy_id, academy_telephone)，主键为"学号"，其中学院id依赖于学号，而学院地点和学院电话依赖于学院id，存在传递依赖，不符合第三范式。')]),s._v(" "),a("p",[s._v("可以把学生关系表分为如下两个表：学生：(student_no, student_name, age, academy_id)；学院：(academy_id, academy_telephone)。")]),s._v(" "),a("p",[a("strong",[s._v("2NF和3NF的区别？")])]),s._v(" "),a("ul",[a("li",[s._v("2NF依据是非主键列是否完全依赖于主键，还是依赖于主键的一部分。")]),s._v(" "),a("li",[s._v("3NF依据是非主键列是直接依赖于主键，还是直接依赖于非主键。")])]),s._v(" "),a("h2",{attrs:{id:"事务隔离级别有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事务隔离级别有哪些"}},[s._v("#")]),s._v(" 事务隔离级别有哪些？")]),s._v(" "),a("p",[s._v("先了解下几个概念：脏读、不可重复读、幻读。")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("脏读")]),s._v("是指在一个事务处理过程里读取了另一个未提交的事务中的数据。")]),s._v(" "),a("li",[a("strong",[s._v("不可重复读")]),s._v("是指在对于数据库中的某行记录，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，另一个事务修改了数据并提交了。")]),s._v(" "),a("li",[a("strong",[s._v("幻读")]),s._v("是当某个事务在读取某个范围内的记录时，另外一个事务又在该范围内插入了新的记录。对幻读的正确理解是一个事务内的读取操作的结论不能支撑之后业务的执行。假设事务要新增一条记录，主键为id，在新增之前执行了select，没有发现id为xxx的记录，但插入时出现主键冲突，这就属于幻读，读取不到记录却发现主键冲突是因为记录实际上已经被其他的事务插入了，但当前事务不可见。")])]),s._v(" "),a("p",[a("strong",[s._v("不可重复读和脏读的区别")]),s._v("是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。")]),s._v(" "),a("p",[s._v("事务隔离就是为了解决上面提到的脏读、不可重复读、幻读这几个问题。")]),s._v(" "),a("p",[s._v("MySQL数据库为我们提供的四种隔离级别：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("Serializable")]),s._v(" (串行化)：通过强制事务排序，使之不可能相互冲突，从而解决幻读问题。")]),s._v(" "),a("li",[a("strong",[s._v("Repeatable read")]),s._v(" (可重复读)：MySQL的默认事务隔离级别，它确保同一事务的多个实例在并发读取数据时，会看到同样的数据行，解决了不可重复读的问题。")]),s._v(" "),a("li",[a("strong",[s._v("Read committed")]),s._v(" (读已提交)：一个事务只能看见已经提交事务所做的改变。可避免脏读的发生。")]),s._v(" "),a("li",[a("strong",[s._v("Read uncommitted")]),s._v(" (读未提交)：所有事务都可以看到其他未提交事务的执行结果。")])]),s._v(" "),a("p",[s._v("查看隔离级别：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select @@transaction_isolation;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("设置隔离级别：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("set session transaction isolation level read uncommitted;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"生产环境数据库一般用的什么隔离级别呢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生产环境数据库一般用的什么隔离级别呢"}},[s._v("#")]),s._v(" 生产环境数据库一般用的什么隔离级别呢？")]),s._v(" "),a("p",[a("strong",[s._v("生产环境大多使用RC")]),s._v("。为什么不是RR呢？")]),s._v(" "),a("blockquote",[a("p",[s._v("可重复读(Repeatable Read)，简称为RR\n读已提交(Read Commited)，简称为RC")])]),s._v(" "),a("p",[s._v("缘由一：在RR隔离级别下，存在间隙锁，导致出现死锁的几率比RC大的多！\n缘由二：在RR隔离级别下，条件列未命中索引会锁表！而在RC隔离级别下，只锁行!")]),s._v(" "),a("p",[s._v("也就是说，RC的并发性高于RR。")]),s._v(" "),a("p",[s._v("并且大部分场景下，不可重复读问题是可以接受的。毕竟数据都已经提交了，读出来本身就没有太大问题！")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/59061106",target:"_blank",rel:"noopener noreferrer"}},[s._v("互联网项目中mysql应该选什么事务隔离级别"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"编码和字符集的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#编码和字符集的关系"}},[s._v("#")]),s._v(" 编码和字符集的关系")]),s._v(" "),a("p",[s._v("我们平时可以在编辑器上输入各种中文英文字母，但这些都是给人读的，不是给计算机读的，其实计算机真正保存和传输数据都是以"),a("strong",[s._v("二进制")]),s._v("0101的格式进行的。")]),s._v(" "),a("p",[s._v("那么就需要有一个规则，把中文和英文字母转化为二进制。其中d对应十六进制下的64，它可以转换为01二进制的格式。于是字母和数字就这样一一对应起来了，这就是"),a("strong",[s._v("ASCII编码")]),s._v("格式。")]),s._v(" "),a("p",[s._v("它用"),a("strong",[s._v("一个字节")]),s._v("，也就是"),a("code",[s._v("8位")]),s._v("来标识字符，基础符号有128个，扩展符号也是128个。也就只能表示下"),a("strong",[s._v("英文字母和数字")]),s._v("。")]),s._v(" "),a("p",[s._v("这明显不够用。于是，为了标识"),a("strong",[s._v("中文")]),s._v("，出现了"),a("strong",[s._v("GB2312")]),s._v("的编码格式。为了标识"),a("strong",[s._v("希腊语")]),s._v("，出现了"),a("strong",[s._v("greek")]),s._v("编码格式，为了标识"),a("strong",[s._v("俄语")]),s._v("，整了"),a("strong",[s._v("cp866")]),s._v("编码格式。")]),s._v(" "),a("p",[s._v("为了统一它们，于是出现了"),a("strong",[s._v("Unicode编码格式")]),s._v("，它用了2~4个字节来表示字符，这样理论上所有符号都能被收录进去，并且它还完全兼容ASCII的编码，也就是说，同样是字母d，在ASCII用64表示，在Unicode里还是用64来表示。")]),s._v(" "),a("p",[s._v("但"),a("strong",[s._v("不同的地方是ASCII编码用1个字节来表示，而Unicode用则两个字节来表示。")])]),s._v(" "),a("p",[s._v("同样都是字母d，unicode比ascii多使用了一个字节，如下：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("D   ASCII:           01100100\nD Unicode:  00000000 01100100\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("可以看到，上面的unicode编码，前面的都是0，其实用不上，但还占了个字节，有点浪费。如果我们能做到该隐藏时隐藏，这样就能省下不少空间，按这个思路，就是就有了"),a("strong",[s._v("UTF-8编码")]),s._v("。")]),s._v(" "),a("p",[s._v("总结一下，按照一定规则把符号和二进制码对应起来，这就是"),a("strong",[s._v("编码")]),s._v("。而把n多这种已经编码的字符聚在一起，就是我们常说的"),a("strong",[s._v("字符集")]),s._v("。")]),s._v(" "),a("p",[s._v("比如utf-8字符集就是所有utf-8编码格式的字符的合集。")]),s._v(" "),a("p",[s._v("想看下mysql支持哪些字符集。可以执行 "),a("code",[s._v("show charset;")])]),s._v(" "),a("h2",{attrs:{id:"utf8和utf8mb4的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#utf8和utf8mb4的区别"}},[s._v("#")]),s._v(" utf8和utf8mb4的区别")]),s._v(" "),a("p",[s._v("上面提到utf-8是在unicode的基础上做的优化，既然unicode有办法表示所有字符，那utf-8也一样可以表示所有字符，为了避免混淆，我在后面叫它"),a("strong",[s._v("大utf8")]),s._v("。")]),s._v(" "),a("p",[s._v("mysql支持的字符集中有utf8和utf8mb4。")]),s._v(" "),a("p",[s._v("先说"),a("strong",[s._v("utf8mb4")]),s._v("编码，mb4就是"),a("strong",[s._v("most bytes 4")]),s._v("的意思，从上图最右边的"),a("code",[s._v("Maxlen")]),s._v("可以看到，它最大支持用"),a("strong",[s._v("4个字节")]),s._v("来表示字符，它几乎可以用来表示目前已知的所有的字符。")]),s._v(" "),a("p",[s._v("再说mysql字符集里的"),a("strong",[s._v("utf8")]),s._v("，它是数据库的"),a("strong",[s._v("默认字符集")]),s._v("。但注意，"),a("strong",[s._v("此utf8非彼utf8")]),s._v("，我们叫它"),a("strong",[s._v("小utf8")]),s._v("字符集。为什么这么说，因为从Maxlen可以看出，它最多支持用3个字节去表示字符，按utf8mb4的命名方式，准确点应该叫它"),a("strong",[s._v("utf8mb3")]),s._v("。")]),s._v(" "),a("p",[s._v("utf8 就像是阉割版的utf8mb4，只支持部分字符。比如"),a("code",[s._v("emoji")]),s._v("表情，它就不支持。")]),s._v(" "),a("p",[s._v("而mysql支持的字符集里，第三列，"),a("strong",[s._v("collation")]),s._v("，它是指"),a("strong",[s._v("字符集的比较规则")]),s._v("。")]),s._v(" "),a("p",[s._v('比如，**"debug"和"Debug"**是同一个单词，但它们大小写不同，该不该判为同一个单词呢。')]),s._v(" "),a("p",[s._v("这时候就需要用到collation了。")]),s._v(" "),a("p",[s._v("通过"),a("code",[s._v("SHOW COLLATION WHERE Charset = 'utf8mb4';")]),s._v("可以查看到"),a("code",[s._v("utf8mb4")]),s._v("下支持什么比较规则。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/20220527084528.png",alt:""}})]),s._v(" "),a("p",[s._v("如果"),a("code",[s._v("collation = utf8mb4_general_ci")]),s._v("，是指使用utf8mb4字符集的前提下，"),a("strong",[s._v("挨个字符进行比较")]),s._v("（"),a("code",[s._v("general")]),s._v("），并且不区分大小写（"),a("code",[s._v("_ci，case insensitice")]),s._v("）。")]),s._v(" "),a("p",[s._v("这种情况下，"),a("strong",[s._v('"debug"和"Debug"是同一个单词')]),s._v("。")]),s._v(" "),a("p",[s._v("如果改成"),a("code",[s._v("collation=utf8mb4_bin")]),s._v("，就是指"),a("strong",[s._v("挨个比较二进制位大小")]),s._v("。")]),s._v(" "),a("p",[s._v('于是**"debug"和"Debug"就不是同一个单词**。')]),s._v(" "),a("p",[s._v("如果改成"),a("code",[s._v("collation=utf8mb4_bin")]),s._v("，就是指"),a("strong",[s._v("挨个比较二进制位大小")]),s._v("。")]),s._v(" "),a("p",[s._v('于是**"debug"和"Debug"就不是同一个单词**。')]),s._v(" "),a("p",[a("strong",[s._v("那utf8mb4对比utf8有什么劣势吗？")])]),s._v(" "),a("p",[s._v("我们知道数据库表里，字段类型如果是"),a("code",[s._v("char(2)")]),s._v("的话，里面的"),a("code",[s._v("2")]),s._v("是指"),a("strong",[s._v("字符个数")]),s._v("，也就是说"),a("strong",[s._v("不管这张表用的是什么编码的字符集")]),s._v("，都能放上2个字符。")]),s._v(" "),a("p",[s._v("而char又是"),a("strong",[s._v("固定长度")]),s._v("，为了能放下2个utf8mb4的字符，char会默认保留"),a("code",[s._v("2*4（maxlen=4）= 8")]),s._v("个字节的空间。")]),s._v(" "),a("p",[s._v("如果是utf8mb3，则会默认保留 "),a("code",[s._v("2 * 3 (maxlen=3) = 6")]),s._v("个字节的空间。也就是说，在这种情况下，"),a("strong",[s._v("utf8mb4会比utf8mb3多使用一些空间。")])]),s._v(" "),a("h2",{attrs:{id:"索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引"}},[s._v("#")]),s._v(" 索引")]),s._v(" "),a("h3",{attrs:{id:"什么是索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是索引"}},[s._v("#")]),s._v(" 什么是索引？")]),s._v(" "),a("p",[s._v("索引是存储引擎用于提高数据库表的访问速度的一种"),a("strong",[s._v("数据结构")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"索引的优缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的优缺点"}},[s._v("#")]),s._v(" 索引的优缺点？")]),s._v(" "),a("p",[s._v("优点：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("加快数据查找的速度")])]),s._v(" "),a("li",[s._v("为用来排序或者是分组的字段添加索引，可以加快分组和排序的速度")]),s._v(" "),a("li",[s._v("加快表与表之间的连接")])]),s._v(" "),a("p",[s._v("缺点：")]),s._v(" "),a("ul",[a("li",[s._v("建立索引需要"),a("strong",[s._v("占用物理空间")])]),s._v(" "),a("li",[s._v("会降低表的增删改的效率，因为每次对表记录进行增删改，需要进行"),a("strong",[s._v("动态维护索引")]),s._v("，导致增删改时间变长")])]),s._v(" "),a("h3",{attrs:{id:"索引的作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的作用"}},[s._v("#")]),s._v(" 索引的作用？")]),s._v(" "),a("p",[s._v("数据是存储在磁盘上的，查询数据时，如果没有索引，会加载所有的数据到内存，依次进行检索，读取磁盘次数较多。有了索引，就不需要加载所有数据，因为B+树的高度一般在2-4层，最多只需要读取2-4次磁盘，查询速度大大提升。")]),s._v(" "),a("h3",{attrs:{id:"什么情况下需要建索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下需要建索引"}},[s._v("#")]),s._v(" 什么情况下需要建索引？")]),s._v(" "),a("ol",[a("li",[s._v("经常用于查询的字段")]),s._v(" "),a("li",[s._v("经常用于连接的字段建立索引，可以加快连接的速度")]),s._v(" "),a("li",[s._v("经常需要排序的字段建立索引，因为索引已经排好序，可以加快排序查询速度")])]),s._v(" "),a("h3",{attrs:{id:"什么情况下不建索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么情况下不建索引"}},[s._v("#")]),s._v(" 什么情况下不建索引？")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("where")]),s._v("条件中用不到的字段不适合建立索引")]),s._v(" "),a("li",[s._v("表记录较少。比如只有几百条数据，没必要加索引。")]),s._v(" "),a("li",[s._v("需要经常增删改。需要评估是否适合加索引")]),s._v(" "),a("li",[a("strong",[s._v("参与列计算")]),s._v("的列不适合建索引")]),s._v(" "),a("li",[a("strong",[s._v("区分度不高")]),s._v("的字段不适合建立索引，如性别，只有男/女/未知三个值。加了索引，查询效率也不会提高。")])]),s._v(" "),a("h3",{attrs:{id:"索引的数据结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的数据结构"}},[s._v("#")]),s._v(" 索引的数据结构")]),s._v(" "),a("p",[s._v("索引的数据结构主要有B+树和哈希表，对应的索引分别为B+树索引和哈希索引。InnoDB引擎的索引类型有B+树索引和哈希索引，默认的索引类型为B+树索引。")]),s._v(" "),a("p",[a("strong",[s._v("B+树索引")])]),s._v(" "),a("p",[s._v("B+ 树是基于B 树和叶子节点顺序访问指针进行实现，它具有B树的平衡性，并且通过顺序访问指针来提高区间查询的性能。")]),s._v(" "),a("p",[s._v("在 B+ 树中，节点中的 "),a("code",[s._v("key")]),s._v(" 从左到右递增排列，如果某个指针的左右相邻 "),a("code",[s._v("key")]),s._v(" 分别是 key"),a("sub",[s._v("i")]),s._v(" 和 key"),a("sub",[s._v("i+1")]),s._v("，则该指针指向节点的所有 "),a("code",[s._v("key")]),s._v(" 大于等于 key"),a("sub",[s._v("i")]),s._v(" 且小于等于 key"),a("sub",[s._v("i+1")]),s._v("。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/B+%E6%A0%91%E7%B4%A2%E5%BC%950.png",alt:""}})]),s._v(" "),a("p",[s._v("进行查找操作时，首先在根节点进行二分查找，找到"),a("code",[s._v("key")]),s._v("所在的指针，然后递归地在指针所指向的节点进行查找。直到查找到叶子节点，然后在叶子节点上进行二分查找，找出"),a("code",[s._v("key")]),s._v("所对应的数据项。")]),s._v(" "),a("p",[s._v("MySQL 数据库使用最多的索引类型是"),a("code",[s._v("BTREE")]),s._v("索引，底层基于B+树数据结构来实现。")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("mysql> show index from blog\\G;\n*************************** 1. row ***************************\n        Table: blog\n   Non_unique: 0\n     Key_name: PRIMARY\n Seq_in_index: 1\n  Column_name: blog_id\n    Collation: A\n  Cardinality: 4\n     Sub_part: NULL\n       Packed: NULL\n         Null:\n   Index_type: BTREE\n      Comment:\nIndex_comment:\n      Visible: YES\n   Expression: NULL\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("strong",[s._v("哈希索引")])]),s._v(" "),a("p",[s._v("哈希索引是基于哈希表实现的，对于每一行数据，存储引擎会对索引列进行哈希计算得到哈希码，并且哈希算法要尽量保证不同的列值计算出的哈希码值是不同的，将哈希码的值作为哈希表的key值，将指向数据行的指针作为哈希表的value值。这样查找一个数据的时间复杂度就是O(1)，一般多用于精确查找。")]),s._v(" "),a("h3",{attrs:{id:"hash索引和b-树索引的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hash索引和b-树索引的区别"}},[s._v("#")]),s._v(" Hash索引和B+树索引的区别？")]),s._v(" "),a("ul",[a("li",[s._v("哈希索引"),a("strong",[s._v("不支持排序")]),s._v("，因为哈希表是无序的。")]),s._v(" "),a("li",[s._v("哈希索引"),a("strong",[s._v("不支持范围查找")]),s._v("。")]),s._v(" "),a("li",[s._v("哈希索引"),a("strong",[s._v("不支持模糊查询")]),s._v("及多列索引的最左前缀匹配。")]),s._v(" "),a("li",[s._v("因为哈希表中会"),a("strong",[s._v("存在哈希冲突")]),s._v("，所以哈希索引的性能是不稳定的，而B+树索引的性能是相对稳定的，每次查询都是从根节点到叶子节点。")])]),s._v(" "),a("h3",{attrs:{id:"为什么b-树比b树更适合实现数据库索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么b-树比b树更适合实现数据库索引"}},[s._v("#")]),s._v(" 为什么B+树比B树更适合实现数据库索引？")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("由于B+树的数据都存储在叶子结点中，叶子结点均为索引，方便扫库，只需要扫一遍叶子结点即可，但是B树因为其分支结点同样存储着数据，我们要找到具体的数据，需要进行一次中序遍历按序来扫，所以B+树更加适合在区间查询的情况，而在数据库中基于范围的查询是非常频繁的，所以通常B+树用于数据库索引。")])]),s._v(" "),a("li",[a("p",[s._v("B+树的节点只存储索引key值，具体信息的地址存在于叶子节点的地址中。这就使以页为单位的索引中可以存放更多的节点。减少更多的I/O支出。")])]),s._v(" "),a("li",[a("p",[s._v("B+树的查询效率更加稳定，任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。")])])]),s._v(" "),a("h3",{attrs:{id:"索引有什么分类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引有什么分类"}},[s._v("#")]),s._v(" 索引有什么分类？")]),s._v(" "),a("p",[s._v("1、"),a("strong",[s._v("主键索引")]),s._v("：名为primary的唯一非空索引，不允许有空值。")]),s._v(" "),a("p",[s._v("2、"),a("strong",[s._v("唯一索引")]),s._v("：索引列中的值必须是唯一的，但是允许为空值。唯一索引和主键索引的区别是：唯一索引字段可以为null且可以存在多个null值，而主键索引字段不可以为null。唯一索引的用途：唯一标识数据库表中的每条记录，主要是用来防止数据重复插入。创建唯一索引的SQL语句如下：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ALTER TABLE table_name\nADD CONSTRAINT constraint_name UNIQUE KEY(column_1,column_2,...);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("3、"),a("strong",[s._v("组合索引")]),s._v("：在表中的多个字段组合上创建的索引，只有在查询条件中使用了这些字段的左边字段时，索引才会被使用，使用组合索引时需遵循最左前缀原则。")]),s._v(" "),a("p",[s._v("4、"),a("strong",[s._v("全文索引")]),s._v("：只能在"),a("code",[s._v("CHAR")]),s._v("、"),a("code",[s._v("VARCHAR")]),s._v("和"),a("code",[s._v("TEXT")]),s._v("类型字段上使用全文索引。")]),s._v(" "),a("p",[s._v("5、"),a("strong",[s._v("普通索引")]),s._v("：普通索引是最基本的索引，它没有任何限制，值可以为空。")]),s._v(" "),a("h3",{attrs:{id:"什么是最左匹配原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是最左匹配原则"}},[s._v("#")]),s._v(" 什么是最左匹配原则？")]),s._v(" "),a("p",[s._v("如果 SQL 语句中用到了组合索引中的最左边的索引，那么这条 SQL 语句就可以利用这个组合索引去进行匹配。当遇到范围查询("),a("code",[s._v(">")]),s._v("、"),a("code",[s._v("<")]),s._v("、"),a("code",[s._v("between")]),s._v("、"),a("code",[s._v("like")]),s._v(")就会停止匹配，后面的字段不会用到索引。")]),s._v(" "),a("p",[s._v("对"),a("code",[s._v("(a,b,c)")]),s._v("建立索引，查询条件使用 a/ab/abc 会走索引，使用 bc 不会走索引。")]),s._v(" "),a("p",[s._v("对"),a("code",[s._v("(a,b,c,d)")]),s._v("建立索引，查询条件为"),a("code",[s._v("a = 1 and b = 2 and c > 3 and d = 4")]),s._v("，那么a、b和c三个字段能用到索引，而d无法使用索引。因为遇到了范围查询。")]),s._v(" "),a("p",[s._v("如下图，对(a, b) 建立索引，a 在索引树中是全局有序的，而 b 是全局无序，局部有序（当a相等时，会根据b进行排序）。直接执行"),a("code",[s._v("b = 2")]),s._v("这种查询条件无法使用索引。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/%E6%9C%80%E5%B7%A6%E5%89%8D%E7%BC%80.png",alt:"最左前缀"}})]),s._v(" "),a("p",[s._v("当a的值确定的时候，b是有序的。例如"),a("code",[s._v("a = 1")]),s._v("时，b值为1，2是有序的状态。当"),a("code",[s._v("a = 2")]),s._v("时候，b的值为1，4也是有序状态。 当执行"),a("code",[s._v("a = 1 and b = 2")]),s._v("时a和b字段能用到索引。而执行"),a("code",[s._v("a > 1 and b = 2")]),s._v("时，a字段能用到索引，b字段用不到索引。因为a的值此时是一个范围，不是固定的，在这个范围内b值不是有序的，因此b字段无法使用索引。")]),s._v(" "),a("h3",{attrs:{id:"什么是聚集索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是聚集索引"}},[s._v("#")]),s._v(" 什么是聚集索引？")]),s._v(" "),a("p",[s._v("InnoDB使用表的主键构造主键索引树，同时叶子节点中存放的即为整张表的记录数据。聚集索引叶子节点的存储是逻辑上连续的，使用双向链表连接，叶子节点按照主键的顺序排序，因此对于主键的排序查找和范围查找速度比较快。")]),s._v(" "),a("p",[s._v("聚集索引的叶子节点就是整张表的行记录。InnoDB 主键使用的是聚簇索引。聚集索引要比非聚集索引查询效率高很多。")]),s._v(" "),a("p",[s._v("对于"),a("code",[s._v("InnoDB")]),s._v("来说，聚集索引一般是表中的主键索引，如果表中没有显示指定主键，则会选择表中的第一个不允许为"),a("code",[s._v("NULL")]),s._v("的唯一索引。如果没有主键也没有合适的唯一索引，那么"),a("code",[s._v("InnoDB")]),s._v("内部会生成一个隐藏的主键作为聚集索引，这个隐藏的主键长度为6个字节，它的值会随着数据的插入自增。")]),s._v(" "),a("h3",{attrs:{id:"什么是覆盖索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是覆盖索引"}},[s._v("#")]),s._v(" 什么是覆盖索引？")]),s._v(" "),a("p",[a("code",[s._v("select")]),s._v("的数据列只用从索引中就能够取得，不需要"),a("strong",[s._v("回表")]),s._v("进行二次查询，也就是说查询列要被所使用的索引覆盖。对于"),a("code",[s._v("innodb")]),s._v("表的二级索引，如果索引能覆盖到查询的列，那么就可以避免对主键索引的二次查询。")]),s._v(" "),a("p",[s._v("不是所有类型的索引都可以成为覆盖索引。覆盖索引要存储索引列的值，而哈希索引、全文索引不存储索引列的值，所以MySQL使用b+树索引做覆盖索引。")]),s._v(" "),a("p",[s._v("对于使用了覆盖索引的查询，在查询前面使用"),a("code",[s._v("explain")]),s._v("，输出的extra列会显示为"),a("code",[s._v("using index")]),s._v("。")]),s._v(" "),a("p",[s._v("比如"),a("code",[s._v("user_like")]),s._v(" 用户点赞表，组合索引为"),a("code",[s._v("(user_id, blog_id)")]),s._v("，"),a("code",[s._v("user_id")]),s._v("和"),a("code",[s._v("blog_id")]),s._v("都不为"),a("code",[s._v("null")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("explain select blog_id from user_like where user_id = 13;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("explain")]),s._v("结果的"),a("code",[s._v("Extra")]),s._v("列为"),a("code",[s._v("Using index")]),s._v("，查询的列被索引覆盖，并且where筛选条件符合最左前缀原则，通过"),a("strong",[s._v("索引查找")]),s._v("就能直接找到符合条件的数据，不需要回表查询数据。")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("explain select user_id from user_like where blog_id = 1;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("explain")]),s._v("结果的"),a("code",[s._v("Extra")]),s._v("列为"),a("code",[s._v("Using where; Using index")]),s._v("， 查询的列被索引覆盖，where筛选条件不符合最左前缀原则，无法通过索引查找找到符合条件的数据，但可以通过"),a("strong",[s._v("索引扫描")]),s._v("找到符合条件的数据，也不需要回表查询数据。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/cover-index.png",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"索引的设计原则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引的设计原则"}},[s._v("#")]),s._v(" 索引的设计原则？")]),s._v(" "),a("ul",[a("li",[s._v("索引列的"),a("strong",[s._v("区分度越高")]),s._v("，索引的效果越好。比如使用性别这种区分度很低的列作为索引，效果就会很差。")]),s._v(" "),a("li",[s._v("尽量使用"),a("strong",[s._v("短索引")]),s._v("，对于较长的字符串进行索引时应该指定一个较短的前缀长度，因为较小的索引涉及到的磁盘I/O较少，查询速度更快。")]),s._v(" "),a("li",[s._v("索引不是越多越好，每个索引都需要额外的物理空间，维护也需要花费时间。")]),s._v(" "),a("li",[s._v("利用"),a("strong",[s._v("最左前缀原则")]),s._v("。")])]),s._v(" "),a("h3",{attrs:{id:"索引什么时候会失效"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引什么时候会失效"}},[s._v("#")]),s._v(" 索引什么时候会失效？")]),s._v(" "),a("p",[s._v("导致索引失效的情况：")]),s._v(" "),a("ul",[a("li",[s._v("对于组合索引，不是使用组合索引最左边的字段，则不会使用索引")]),s._v(" "),a("li",[s._v("以%开头的like查询如"),a("code",[s._v("%abc")]),s._v("，无法使用索引；非%开头的like查询如"),a("code",[s._v("abc%")]),s._v("，相当于范围查询，会使用索引")]),s._v(" "),a("li",[s._v("查询条件中列类型是字符串，没有使用引号，可能会因为类型不同发生隐式转换，使索引失效")]),s._v(" "),a("li",[s._v("判断索引列是否不等于某个值时")]),s._v(" "),a("li",[s._v("对索引列进行运算")]),s._v(" "),a("li",[s._v("查询条件使用"),a("code",[s._v("or")]),s._v("连接，也会导致索引失效")])]),s._v(" "),a("h3",{attrs:{id:"什么是前缀索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是前缀索引"}},[s._v("#")]),s._v(" 什么是前缀索引？")]),s._v(" "),a("p",[s._v("有时需要在很长的字符列上创建索引，这会造成索引特别大且慢。使用前缀索引可以避免这个问题。")]),s._v(" "),a("p",[s._v("前缀索引是指对文本或者字符串的前几个字符建立索引，这样索引的长度更短，查询速度更快。")]),s._v(" "),a("p",[s._v("创建前缀索引的关键在于选择足够长的前缀以"),a("strong",[s._v("保证较高的索引选择性")]),s._v("。索引选择性越高查询效率就越高，因为选择性高的索引可以让MySQL在查找时过滤掉更多的数据行。")]),s._v(" "),a("p",[s._v("建立前缀索引的方式：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// email列创建前缀索引\nALTER TABLE table_name ADD KEY(column_name(prefix_length));\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("h3",{attrs:{id:"索引下推"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#索引下推"}},[s._v("#")]),s._v(" 索引下推")]),s._v(" "),a("p",[s._v("参考我的另一篇文章："),a("a",{attrs:{href:"http://mp.weixin.qq.com/s?__biz=Mzg2OTY1NzY0MQ==&mid=2247486661&idx=1&sn=4771369fd5c624c96647696ae76eca4a&chksm=ce98f183f9ef789562ac15c02b0d0dfdf3d2f178ea26667f5aded5d24c1004f049b951e85b33&scene=126&&sessionid=1650167859#rd",target:"_blank",rel:"noopener noreferrer"}},[s._v("图解索引下推！"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"常见的存储引擎有哪些"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常见的存储引擎有哪些"}},[s._v("#")]),s._v(" 常见的存储引擎有哪些？")]),s._v(" "),a("p",[s._v("MySQL中常用的四种存储引擎分别是： "),a("strong",[s._v("MyISAM")]),s._v("、"),a("strong",[s._v("InnoDB")]),s._v("、"),a("strong",[s._v("MEMORY")]),s._v("、"),a("strong",[s._v("ARCHIVE")]),s._v("。MySQL 5.5版本后默认的存储引擎为"),a("code",[s._v("InnoDB")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("InnoDB存储引擎")])]),s._v(" "),a("p",[s._v("InnoDB是MySQL"),a("strong",[s._v("默认的事务型存储引擎")]),s._v("，使用最广泛，基于聚簇索引建立的。InnoDB内部做了很多优化，如能够自动在内存中创建自适应hash索引，以加速读操作。")]),s._v(" "),a("p",[a("strong",[s._v("优点")]),s._v("：支持事务和崩溃修复能力；引入了行级锁和外键约束。")]),s._v(" "),a("p",[a("strong",[s._v("缺点")]),s._v("：占用的数据空间相对较大。")]),s._v(" "),a("p",[a("strong",[s._v("适用场景")]),s._v("：需要事务支持，并且有较高的并发读写频率。")]),s._v(" "),a("p",[a("strong",[s._v("MyISAM存储引擎")])]),s._v(" "),a("p",[s._v("数据以紧密格式存储。对于只读数据，或者表比较小、可以容忍修复操作，可以使用MyISAM引擎。MyISAM会将表存储在两个文件中，数据文件"),a("code",[s._v(".MYD")]),s._v("和索引文件"),a("code",[s._v(".MYI")]),s._v("。")]),s._v(" "),a("p",[a("strong",[s._v("优点")]),s._v("：访问速度快。")]),s._v(" "),a("p",[a("strong",[s._v("缺点")]),s._v("：MyISAM不支持事务和行级锁，不支持崩溃后的安全恢复，也不支持外键。")]),s._v(" "),a("p",[a("strong",[s._v("适用场景")]),s._v("：对事务完整性没有要求；表的数据都会只读的。")]),s._v(" "),a("p",[a("strong",[s._v("MEMORY存储引擎")])]),s._v(" "),a("p",[s._v("MEMORY引擎将数据全部放在内存中，访问速度较快，但是一旦系统奔溃的话，数据都会丢失。")]),s._v(" "),a("p",[s._v("MEMORY引擎默认使用哈希索引，将键的哈希值和指向数据行的指针保存在哈希索引中。")]),s._v(" "),a("p",[a("strong",[s._v("优点")]),s._v("：访问速度较快。")]),s._v(" "),a("p",[a("strong",[s._v("缺点")]),s._v("：")]),s._v(" "),a("ol",[a("li",[s._v("哈希索引数据不是按照索引值顺序存储，无法用于排序。")]),s._v(" "),a("li",[s._v("不支持部分索引匹配查找，因为哈希索引是使用索引列的全部内容来计算哈希值的。")]),s._v(" "),a("li",[s._v("只支持等值比较，不支持范围查询。")]),s._v(" "),a("li",[s._v("当出现哈希冲突时，存储引擎需要遍历链表中所有的行指针，逐行进行比较，直到找到符合条件的行。")])]),s._v(" "),a("p",[a("strong",[s._v("ARCHIVE存储引擎")])]),s._v(" "),a("p",[s._v("ARCHIVE存储引擎非常适合存储大量独立的、作为历史记录的数据。ARCHIVE提供了压缩功能，拥有高效的插入速度，但是这种引擎不支持索引，所以查询性能较差。")]),s._v(" "),a("h2",{attrs:{id:"myisam和innodb的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#myisam和innodb的区别"}},[s._v("#")]),s._v(" MyISAM和InnoDB的区别？")]),s._v(" "),a("ol",[a("li",[a("p",[a("strong",[s._v("是否支持行级锁")]),s._v(" : "),a("code",[s._v("MyISAM")]),s._v(" 只有表级锁，而"),a("code",[s._v("InnoDB")]),s._v(" 支持行级锁和表级锁，默认为行级锁。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("是否支持事务和崩溃后的安全恢复")]),s._v("： "),a("code",[s._v("MyISAM")]),s._v(" 不提供事务支持。而"),a("code",[s._v("InnoDB")]),s._v("提供事务支持，具有事务、回滚和崩溃修复能力。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("是否支持外键：")]),s._v(" "),a("code",[s._v("MyISAM")]),s._v("不支持，而"),a("code",[s._v("InnoDB")]),s._v("支持。")])]),s._v(" "),a("li",[a("p",[a("strong",[s._v("是否支持MVCC")]),s._v(" ："),a("code",[s._v("MyISAM")]),s._v("不支持，"),a("code",[s._v("InnoDB")]),s._v("支持。应对高并发事务，MVCC比单纯的加锁更高效。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("MyISAM")]),s._v("不支持聚集索引，"),a("code",[s._v("InnoDB")]),s._v("支持聚集索引。")])])]),s._v(" "),a("h2",{attrs:{id:"mvcc-实现原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mvcc-实现原理"}},[s._v("#")]),s._v(" MVCC 实现原理？")]),s._v(" "),a("p",[s._v("MVCC("),a("code",[s._v("Multiversion concurrency control")]),s._v(") 就是同一份数据保留多版本的一种方式，进而实现并发控制。在查询的时候，通过"),a("code",[s._v("read view")]),s._v("和版本链找到对应版本的数据。")]),s._v(" "),a("p",[s._v("作用：提升并发性能。对于高并发场景，MVCC比行级锁开销更小。")]),s._v(" "),a("p",[a("strong",[s._v("MVCC 实现原理如下：")])]),s._v(" "),a("p",[s._v("MVCC 的实现依赖于版本链，版本链是通过表的三个隐藏字段实现。")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("DB_TRX_ID")]),s._v("：当前事务id，通过事务id的大小判断事务的时间顺序。")]),s._v(" "),a("li",[a("code",[s._v("DB_ROLL_PTR")]),s._v("：回滚指针，指向当前行记录的上一个版本，通过这个指针将数据的多个版本连接在一起构成"),a("code",[s._v("undo log")]),s._v("版本链。")]),s._v(" "),a("li",[a("code",[s._v("DB_ROW_ID")]),s._v("：主键，如果数据表没有主键，InnoDB会自动生成主键。")])]),s._v(" "),a("p",[s._v("每条表记录大概是这样的：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/mvcc9.png",alt:""}})]),s._v(" "),a("p",[s._v("使用事务更新行记录的时候，就会生成版本链，执行过程如下：")]),s._v(" "),a("ol",[a("li",[s._v("用排他锁锁住该行；")]),s._v(" "),a("li",[s._v("将该行原本的值拷贝到"),a("code",[s._v("undo log")]),s._v("，作为旧版本用于回滚；")]),s._v(" "),a("li",[s._v("修改当前行的值，生成一个新版本，更新事务id，使回滚指针指向旧版本的记录，这样就形成一条版本链。")])]),s._v(" "),a("p",[s._v("下面举个例子方便大家理解。")]),s._v(" "),a("p",[s._v("1、初始数据如下，其中"),a("code",[s._v("DB_ROW_ID")]),s._v("和"),a("code",[s._v("DB_ROLL_PTR")]),s._v("为空。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/mvcc2.png",alt:""}})]),s._v(" "),a("p",[s._v("2、事务A对该行数据做了修改，将"),a("code",[s._v("age")]),s._v("修改为12，效果如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/mvcc7.png",alt:""}})]),s._v(" "),a("p",[s._v("3、之后事务B也对该行记录做了修改，将"),a("code",[s._v("age")]),s._v("修改为8，效果如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/mvcc11.png",alt:""}})]),s._v(" "),a("p",[s._v("4、此时undo log有两行记录，并且通过回滚指针连在一起。")]),s._v(" "),a("p",[a("strong",[s._v("接下来了解下read view的概念。")])]),s._v(" "),a("p",[a("code",[s._v("read view")]),s._v("可以理解成将数据在每个时刻的状态拍成“照片”记录下来。在获取某时刻t的数据时，到t时间点拍的“照片”上取数据。")]),s._v(" "),a("p",[s._v("在"),a("code",[s._v("read view")]),s._v("内部维护一个活跃事务链表，表示生成"),a("code",[s._v("read view")]),s._v("的时候还在活跃的事务。这个链表包含在创建"),a("code",[s._v("read view")]),s._v("之前还未提交的事务，不包含创建"),a("code",[s._v("read view")]),s._v("之后提交的事务。")]),s._v(" "),a("p",[s._v("不同隔离级别创建read view的时机不同。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("read committed：每次执行select都会创建新的read_view，保证能读取到其他事务已经提交的修改。")])]),s._v(" "),a("li",[a("p",[s._v("repeatable read：在一个事务范围内，第一次select时更新这个read_view，以后不会再更新，后续所有的select都是复用之前的read_view。这样可以保证事务范围内每次读取的内容都一样，即可重复读。")])])]),s._v(" "),a("p",[a("strong",[s._v("read view的记录筛选方式")])]),s._v(" "),a("p",[a("strong",[s._v("前提")]),s._v("："),a("code",[s._v("DATA_TRX_ID")]),s._v(" 表示每个数据行的最新的事务ID；"),a("code",[s._v("up_limit_id")]),s._v("表示当前快照中的最先开始的事务；"),a("code",[s._v("low_limit_id")]),s._v("表示当前快照中的最慢开始的事务，即最后一个事务。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/read_view10.png",alt:""}})]),s._v(" "),a("ul",[a("li",[s._v("如果"),a("code",[s._v("DATA_TRX_ID")]),s._v(" < "),a("code",[s._v("up_limit_id")]),s._v("：说明在创建"),a("code",[s._v("read view")]),s._v("时，修改该数据行的事务已提交，该版本的记录可被当前事务读取到。")]),s._v(" "),a("li",[s._v("如果"),a("code",[s._v("DATA_TRX_ID")]),s._v(" >= "),a("code",[s._v("low_limit_id")]),s._v("：说明当前版本的记录的事务是在创建"),a("code",[s._v("read view")]),s._v("之后生成的，该版本的数据行不可以被当前事务访问。此时需要通过版本链找到上一个版本，然后重新判断该版本的记录对当前事务的可见性。")]),s._v(" "),a("li",[s._v("如果"),a("code",[s._v("up_limit_id")]),s._v(" <= "),a("code",[s._v("DATA_TRX_ID")]),s._v(" < "),a("code",[s._v("low_limit_i")]),s._v("：\n"),a("ol",[a("li",[s._v("需要在活跃事务链表中查找是否存在ID为"),a("code",[s._v("DATA_TRX_ID")]),s._v("的值的事务。")]),s._v(" "),a("li",[s._v("如果存在，因为在活跃事务链表中的事务是未提交的，所以该记录是不可见的。此时需要通过版本链找到上一个版本，然后重新判断该版本的可见性。")]),s._v(" "),a("li",[s._v("如果不存在，说明事务trx_id 已经提交了，这行记录是可见的。")])])])]),s._v(" "),a("p",[a("strong",[s._v("总结")]),s._v("：InnoDB 的"),a("code",[s._v("MVCC")]),s._v("是通过 "),a("code",[s._v("read view")]),s._v(" 和版本链实现的，版本链保存有历史版本记录，通过"),a("code",[s._v("read view")]),s._v(" 判断当前版本的数据是否可见，如果不可见，再从版本链中找到上一个版本，继续进行判断，直到找到一个可见的版本。")]),s._v(" "),a("h2",{attrs:{id:"快照读和当前读"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#快照读和当前读"}},[s._v("#")]),s._v(" 快照读和当前读")]),s._v(" "),a("p",[s._v("表记录有两种读取方式。")]),s._v(" "),a("ul",[a("li",[a("p",[s._v("快照读：读取的是快照版本。普通的"),a("code",[s._v("SELECT")]),s._v("就是快照读。通过mvcc来进行并发控制的，不用加锁。")])]),s._v(" "),a("li",[a("p",[s._v("当前读：读取的是最新版本。"),a("code",[s._v("UPDATE、DELETE、INSERT、SELECT … LOCK IN SHARE MODE、SELECT … FOR UPDATE")]),s._v("是当前读。")])])]),s._v(" "),a("p",[s._v("快照读情况下，InnoDB通过"),a("code",[s._v("mvcc")]),s._v("机制避免了幻读现象。而"),a("code",[s._v("mvcc")]),s._v("机制无法避免当前读情况下出现的幻读现象。因为当前读每次读取的都是最新数据，这时如果两次查询中间有其它事务插入数据，就会产生幻读。")]),s._v(" "),a("p",[s._v("下面举个例子说明下：")]),s._v(" "),a("p",[s._v("1、首先，user表只有两条记录，具体如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/image-20210922232259664.png",alt:""}})]),s._v(" "),a("p",[s._v("2、事务a和事务b同时开启事务"),a("code",[s._v("start transaction")]),s._v("；")]),s._v(" "),a("p",[s._v("3、事务a插入数据然后提交；")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("insert into user(user_name, user_password, user_mail, user_state) values('tyson', 'a', 'a', 0);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("4、事务b执行全表的update；")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("update user set user_name = 'a';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("5、事务b然后执行查询，查到了事务a中插入的数据。（下图左边是事务b，右边是事务a。事务开始之前只有两条记录，事务a插入一条数据之后，事务b查询出来是三条数据）")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/%E5%B9%BB%E8%AF%BB1.png",alt:""}})]),s._v(" "),a("p",[s._v("以上就是当前读出现的幻读现象。")]),s._v(" "),a("p",[a("strong",[s._v("那么MySQL是如何避免幻读？")])]),s._v(" "),a("ul",[a("li",[s._v("在快照读情况下，MySQL通过"),a("code",[s._v("mvcc")]),s._v("来避免幻读。")]),s._v(" "),a("li",[s._v("在当前读情况下，MySQL通过"),a("code",[s._v("next-key")]),s._v("来避免幻读（加行锁和间隙锁来实现的）。")])]),s._v(" "),a("p",[s._v("next-key包括两部分：行锁和间隙锁。行锁是加在索引上的锁，间隙锁是加在索引之间的。")]),s._v(" "),a("p",[a("code",[s._v("Serializable")]),s._v("隔离级别也可以避免幻读，会锁住整张表，并发性极低，一般不会使用。")]),s._v(" "),a("h2",{attrs:{id:"共享锁和排他锁"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享锁和排他锁"}},[s._v("#")]),s._v(" 共享锁和排他锁")]),s._v(" "),a("p",[s._v("SELECT 的读取锁定主要分为两种方式：共享锁和排他锁。")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from table where id<6 lock in share mode;--共享锁\nselect * from table where id<6 for update;--排他锁\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("这两种方式主要的不同在于"),a("code",[s._v("LOCK IN SHARE MODE")]),s._v("多个事务同时更新同一个表单时很容易造成死锁。")]),s._v(" "),a("p",[s._v("申请排他锁的前提是，没有线程对该结果集的任何行数据使用排它锁或者共享锁，否则申请会受到阻塞。在进行事务操作时，MySQL会对查询结果集的每行数据添加排它锁，其他线程对这些数据的更改或删除操作会被阻塞（只能读操作），直到该语句的事务被"),a("code",[s._v("commit")]),s._v("语句或"),a("code",[s._v("rollback")]),s._v("语句结束为止。")]),s._v(" "),a("p",[a("code",[s._v("SELECT... FOR UPDATE")]),s._v(" 使用注意事项：")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("for update")]),s._v(" 仅适用于innodb，且必须在事务范围内才能生效。")]),s._v(" "),a("li",[s._v("根据主键进行查询，查询条件为"),a("code",[s._v("like")]),s._v("或者不等于，主键字段产生"),a("strong",[s._v("表锁")]),s._v("。")]),s._v(" "),a("li",[s._v("根据非索引字段进行查询，会产生"),a("strong",[s._v("表锁")]),s._v("。")])]),s._v(" "),a("h2",{attrs:{id:"bin-log-redo-log-undo-log"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bin-log-redo-log-undo-log"}},[s._v("#")]),s._v(" bin log/redo log/undo log")]),s._v(" "),a("p",[s._v("MySQL日志主要包括查询日志、慢查询日志、事务日志、错误日志、二进制日志等。其中比较重要的是 "),a("code",[s._v("bin log")]),s._v("（二进制日志）和 "),a("code",[s._v("redo log")]),s._v("（重做日志）和 "),a("code",[s._v("undo log")]),s._v("（回滚日志）。")]),s._v(" "),a("p",[a("strong",[s._v("bin log")])]),s._v(" "),a("p",[a("code",[s._v("bin log")]),s._v("是MySQL数据库级别的文件，记录对MySQL数据库执行修改的所有操作，不会记录select和show语句，主要用于恢复数据库和同步数据库。")]),s._v(" "),a("p",[a("strong",[s._v("redo log")])]),s._v(" "),a("p",[a("code",[s._v("redo log")]),s._v("是innodb引擎级别，用来记录innodb存储引擎的事务日志，不管事务是否提交都会记录下来，用于数据恢复。当数据库发生故障，innoDB存储引擎会使用"),a("code",[s._v("redo log")]),s._v("恢复到发生故障前的时刻，以此来保证数据的完整性。将参数"),a("code",[s._v("innodb_flush_log_at_tx_commit")]),s._v("设置为1，那么在执行commit时会将"),a("code",[s._v("redo log")]),s._v("同步写到磁盘。")]),s._v(" "),a("p",[a("strong",[s._v("undo log")])]),s._v(" "),a("p",[s._v("除了记录"),a("code",[s._v("redo log")]),s._v("外，当进行数据修改时还会记录"),a("code",[s._v("undo log")]),s._v("，"),a("code",[s._v("undo log")]),s._v("用于数据的撤回操作，它保留了记录修改前的内容。通过"),a("code",[s._v("undo log")]),s._v("可以实现事务回滚，并且可以根据"),a("code",[s._v("undo log")]),s._v("回溯到某个特定的版本的数据，"),a("strong",[s._v("实现MVCC")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"bin-log和redo-log有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bin-log和redo-log有什么区别"}},[s._v("#")]),s._v(" bin log和redo log有什么区别？")]),s._v(" "),a("ol",[a("li",[a("code",[s._v("bin log")]),s._v("会记录所有日志记录，包括InnoDB、MyISAM等存储引擎的日志；"),a("code",[s._v("redo log")]),s._v("只记录innoDB自身的事务日志。")]),s._v(" "),a("li",[a("code",[s._v("bin log")]),s._v("只在事务提交前写入到磁盘，一个事务只写一次；而在事务进行过程，会有"),a("code",[s._v("redo log")]),s._v("不断写入磁盘。")]),s._v(" "),a("li",[a("code",[s._v("bin log")]),s._v("是逻辑日志，记录的是SQL语句的原始逻辑；"),a("code",[s._v("redo log")]),s._v("是物理日志，记录的是在某个数据页上做了什么修改。")])]),s._v(" "),a("h2",{attrs:{id:"讲一下mysql架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#讲一下mysql架构"}},[s._v("#")]),s._v(" 讲一下MySQL架构？")]),s._v(" "),a("p",[s._v("MySQL主要分为 Server 层和存储引擎层：")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("Server 层")]),s._v("：主要包括连接器、查询缓存、分析器、优化器、执行器等，所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图，函数等，还有一个通用的日志模块 binglog 日志模块。")]),s._v(" "),a("li",[a("strong",[s._v("存储引擎")]),s._v("： 主要负责数据的存储和读取。server 层通过api与存储引擎进行通信。")])]),s._v(" "),a("p",[a("strong",[s._v("Server 层基本组件")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("连接器：")]),s._v(" 当客户端连接 MySQL 时，server层会对其进行身份认证和权限校验。")]),s._v(" "),a("li",[a("strong",[s._v("查询缓存:")]),s._v(" 执行查询语句的时候，会先查询缓存，先校验这个 sql 是否执行过，如果有缓存这个 sql，就会直接返回给客户端，如果没有命中，就会执行后续的操作。")]),s._v(" "),a("li",[a("strong",[s._v("分析器:")]),s._v(" 没有命中缓存的话，SQL 语句就会经过分析器，主要分为两步，词法分析和语法分析，先看 SQL 语句要做什么，再检查 SQL 语句语法是否正确。")]),s._v(" "),a("li",[a("strong",[s._v("优化器：")]),s._v(" 优化器对查询进行优化，包括重写查询、决定表的读写顺序以及选择合适的索引等，生成执行计划。")]),s._v(" "),a("li",[a("strong",[s._v("执行器：")]),s._v(" 首先执行前会校验该用户有没有权限，如果没有权限，就会返回错误信息，如果有权限，就会根据执行计划去调用引擎的接口，返回结果。")])]),s._v(" "),a("h2",{attrs:{id:"分库分表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分库分表"}},[s._v("#")]),s._v(" 分库分表")]),s._v(" "),a("p",[s._v("当单表的数据量达到1000W或100G以后，优化索引、添加从库等可能对数据库性能提升效果不明显，此时就要考虑对其进行切分了。切分的目的就在于减少数据库的负担，缩短查询的时间。")]),s._v(" "),a("p",[s._v("数据切分可以分为两种方式：垂直划分和水平划分。")]),s._v(" "),a("p",[a("strong",[s._v("垂直划分")])]),s._v(" "),a("p",[s._v("垂直划分数据库是根据业务进行划分，例如购物场景，可以将库中涉及商品、订单、用户的表分别划分出成一个库，通过降低单库的大小来提高性能。同样的，分表的情况就是将一个大表根据业务功能拆分成一个个子表，例如商品基本信息和商品描述，商品基本信息一般会展示在商品列表，商品描述在商品详情页，可以将商品基本信息和商品描述拆分成两张表。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/%E5%9E%82%E7%9B%B4%E5%88%92%E5%88%86.png",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("优点")]),s._v("：行记录变小，数据页可以存放更多记录，在查询时减少I/O次数。")]),s._v(" "),a("p",[a("strong",[s._v("缺点")]),s._v("：")]),s._v(" "),a("ul",[a("li",[s._v("主键出现冗余，需要管理冗余列；")]),s._v(" "),a("li",[s._v("会引起表连接JOIN操作，可以通过在业务服务器上进行join来减少数据库压力；")]),s._v(" "),a("li",[s._v("依然存在单表数据量过大的问题。")])]),s._v(" "),a("p",[a("strong",[s._v("水平划分")])]),s._v(" "),a("p",[s._v("水平划分是根据一定规则，例如时间或id序列值等进行数据的拆分。比如根据年份来拆分不同的数据库。每个数据库结构一致，但是数据得以拆分，从而提升性能。")]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/%E6%B0%B4%E5%B9%B3%E5%88%92%E5%88%86.png",alt:""}})]),s._v(" "),a("p",[a("strong",[s._v("优点")]),s._v("：单库（表）的数据量得以减少，提高性能；切分出的表结构相同，程序改动较少。")]),s._v(" "),a("p",[a("strong",[s._v("缺点")]),s._v("：")]),s._v(" "),a("ul",[a("li",[s._v("分片事务一致性难以解决")]),s._v(" "),a("li",[s._v("跨节点"),a("code",[s._v("join")]),s._v("性能差，逻辑复杂")]),s._v(" "),a("li",[s._v("数据分片在扩容时需要迁移")])]),s._v(" "),a("h2",{attrs:{id:"什么是分区表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是分区表"}},[s._v("#")]),s._v(" 什么是分区表？")]),s._v(" "),a("p",[s._v("分区是把一张表的数据分成N多个区块。分区表是一个独立的逻辑表，但是底层由多个物理子表组成。")]),s._v(" "),a("p",[s._v("当查询条件的数据分布在某一个分区的时候，查询引擎只会去某一个分区查询，而不是遍历整个表。在管理层面，如果需要删除某一个分区的数据，只需要删除对应的分区即可。")]),s._v(" "),a("p",[s._v("分区一般都是放在单机里的，用的比较多的是时间范围分区，方便归档。只不过分库分表需要代码实现，分区则是mysql内部实现。分库分表和分区并不冲突，可以结合使用。")]),s._v(" "),a("h2",{attrs:{id:"分区表类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分区表类型"}},[s._v("#")]),s._v(" 分区表类型")]),s._v(" "),a("p",[a("strong",[s._v("range分区")]),s._v("，按照范围分区。比如按照时间范围分区")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("CREATE "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TABLE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("test_range_partition")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n       id "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("INT")]),s._v(" auto_increment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n       createdate DATETIME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n       primary key "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("createdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" \n   PARTITION "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("BY")]),s._v(" RANGE "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TO_DAYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("createdate"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n      PARTITION p201801 VALUES "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LESS")]),s._v(" THAN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TO_DAYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20180201")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      PARTITION p201802 VALUES "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LESS")]),s._v(" THAN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TO_DAYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20180301")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      PARTITION p201803 VALUES "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LESS")]),s._v(" THAN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TO_DAYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20180401")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      PARTITION p201804 VALUES "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LESS")]),s._v(" THAN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TO_DAYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20180501")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      PARTITION p201805 VALUES "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LESS")]),s._v(" THAN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TO_DAYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20180601")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      PARTITION p201806 VALUES "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LESS")]),s._v(" THAN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TO_DAYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20180701")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      PARTITION p201807 VALUES "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LESS")]),s._v(" THAN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TO_DAYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20180801")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      PARTITION p201808 VALUES "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LESS")]),s._v(" THAN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TO_DAYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20180901")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      PARTITION p201809 VALUES "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LESS")]),s._v(" THAN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TO_DAYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20181001")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      PARTITION p201810 VALUES "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LESS")]),s._v(" THAN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TO_DAYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20181101")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      PARTITION p201811 VALUES "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LESS")]),s._v(" THAN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TO_DAYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20181201")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n      PARTITION p201812 VALUES "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("LESS")]),s._v(" THAN "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("TO_DAYS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20190101")]),s._v("'"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("在"),a("code",[s._v("/var/lib/mysql/data/")]),s._v("可以找到对应的数据文件，每个分区表都有一个使用#分隔命名的表文件：")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("rw"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MySQL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MySQL")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("65")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mar")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("47")]),s._v(" db"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("opt\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("rw"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MySQL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MySQL")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8598")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mar")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" test_range_partition"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("frm\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("rw"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MySQL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MySQL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98304")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mar")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" test_range_partition#"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("P")]),s._v("#p201801"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ibd\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("rw"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MySQL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MySQL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98304")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mar")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" test_range_partition#"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("P")]),s._v("#p201802"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ibd\n   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("rw"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v("r"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MySQL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MySQL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98304")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Mar")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("21")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("50")]),s._v(" test_range_partition#"),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("P")]),s._v("#p201803"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("ibd\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[a("strong",[s._v("list分区")])]),s._v(" "),a("p",[s._v("list分区和range分区相似，主要区别在于list是枚举值列表的集合，range是连续的区间值的集合。对于list分区，分区字段必须是已知的，如果插入的字段不在分区时的枚举值中，将无法插入。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("create table test_list_partiotion\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n       id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" auto_increment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n       data_type tinyint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n       primary "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("data_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("partition by "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("list")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("data_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n       partition p0 values in "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("6")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n       partition p1 values in "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("7")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("8")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("11")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("12")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n       partition p2 values in "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("13")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("14")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("15")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("16")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("hash分区")])]),s._v(" "),a("p",[s._v("可以将数据均匀地分布到预先定义的分区中。")]),s._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[s._v("create table test_hash_partiotion\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("\n       id "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" auto_increment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n       create_date datetime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n       primary "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("key")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("create_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("partition by "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("hash")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("year")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("create_date"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" partitions "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h2",{attrs:{id:"分区的问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#分区的问题"}},[s._v("#")]),s._v(" 分区的问题？")]),s._v(" "),a("ol",[a("li",[s._v("打开和锁住所有底层表的成本可能很高。当查询访问分区表时，MySQL 需要打开并锁住所有的底层表，这个操作在分区过滤之前发生，所以无法通过分区过滤来降低此开销，会影响到查询速度。可以通过批量操作来降低此类开销，比如批量插入、"),a("code",[s._v("LOAD DATA INFILE")]),s._v("和一次删除多行数据。")]),s._v(" "),a("li",[s._v("维护分区的成本可能很高。例如重组分区，会先创建一个临时分区，然后将数据复制到其中，最后再删除原分区。")]),s._v(" "),a("li",[s._v("所有分区必须使用相同的存储引擎。")])]),s._v(" "),a("h2",{attrs:{id:"查询语句执行流程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#查询语句执行流程"}},[s._v("#")]),s._v(" 查询语句执行流程？")]),s._v(" "),a("p",[s._v("查询语句的执行流程如下：权限校验、查询缓存、分析器、优化器、权限校验、执行器、引擎。")]),s._v(" "),a("p",[s._v("举个例子，查询语句如下：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from user where id > 1 and name = '大彬';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",[a("li",[s._v("首先检查权限，没有权限则返回错误；")]),s._v(" "),a("li",[s._v("MySQL8.0以前会查询缓存，缓存命中则直接返回，没有则执行下一步；")]),s._v(" "),a("li",[s._v("词法分析和语法分析。提取表名、查询条件，检查语法是否有错误；")]),s._v(" "),a("li",[s._v("两种执行方案，先查 "),a("code",[s._v("id > 1")]),s._v(" 还是 "),a("code",[s._v("name = '大彬'")]),s._v("，优化器根据自己的优化算法选择执行效率最好的方案；")]),s._v(" "),a("li",[s._v("校验权限，有权限就调用数据库引擎接口，返回引擎的执行结果。")])]),s._v(" "),a("h2",{attrs:{id:"更新语句执行过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#更新语句执行过程"}},[s._v("#")]),s._v(" 更新语句执行过程？")]),s._v(" "),a("p",[s._v("更新语句执行流程如下：分析器、权限校验、执行器、引擎、"),a("code",[s._v("redo log")]),s._v("（"),a("code",[s._v("prepare")]),s._v("状态）、"),a("code",[s._v("binlog")]),s._v("、"),a("code",[s._v("redo log")]),s._v("（"),a("code",[s._v("commit")]),s._v("状态）")]),s._v(" "),a("p",[s._v("举个例子，更新语句如下：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("update user set name = '大彬' where id = 1;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",[a("li",[s._v("先查询到 id 为1的记录，有缓存会使用缓存。")]),s._v(" "),a("li",[s._v("拿到查询结果，将 name 更新为大彬，然后调用引擎接口，写入更新数据，innodb 引擎将数据保存在内存中，同时记录"),a("code",[s._v("redo log")]),s._v("，此时"),a("code",[s._v("redo log")]),s._v("进入 "),a("code",[s._v("prepare")]),s._v("状态。")]),s._v(" "),a("li",[s._v("执行器收到通知后记录"),a("code",[s._v("binlog")]),s._v("，然后调用引擎接口，提交"),a("code",[s._v("redo log")]),s._v("为"),a("code",[s._v("commit")]),s._v("状态。")]),s._v(" "),a("li",[s._v("更新完成。")])]),s._v(" "),a("p",[s._v("为什么记录完"),a("code",[s._v("redo log")]),s._v("，不直接提交，而是先进入"),a("code",[s._v("prepare")]),s._v("状态？")]),s._v(" "),a("p",[s._v("假设先写"),a("code",[s._v("redo log")]),s._v("直接提交，然后写"),a("code",[s._v("binlog")]),s._v("，写完"),a("code",[s._v("redo log")]),s._v("后，机器挂了，"),a("code",[s._v("binlog")]),s._v("日志没有被写入，那么机器重启后，这台机器会通过"),a("code",[s._v("redo log")]),s._v("恢复数据，但是这个时候"),a("code",[s._v("binlog")]),s._v("并没有记录该数据，后续进行机器备份的时候，就会丢失这一条数据，同时主从同步也会丢失这一条数据。")]),s._v(" "),a("h2",{attrs:{id:"exist和in的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exist和in的区别"}},[s._v("#")]),s._v(" exist和in的区别？")]),s._v(" "),a("p",[a("code",[s._v("exists")]),s._v("用于对外表记录做筛选。"),a("code",[s._v("exists")]),s._v("会遍历外表，将外查询表的每一行，代入内查询进行判断。当"),a("code",[s._v("exists")]),s._v("里的条件语句能够返回记录行时，条件就为真，返回外表当前记录。反之如果"),a("code",[s._v("exists")]),s._v("里的条件语句不能返回记录行，条件为假，则外表当前记录被丢弃。")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select a.* from A awhere exists(select 1 from B b where a.id=b.id)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("code",[s._v("in")]),s._v("是先把后边的语句查出来放到临时表中，然后遍历临时表，将临时表的每一行，代入外查询去查找。")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from Awhere id in(select id from B)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("strong",[s._v("子查询的表比较大的时候")]),s._v("，使用"),a("code",[s._v("exists")]),s._v("可以有效减少总的循环次数来提升速度；"),a("strong",[s._v("当外查询的表比较大的时候")]),s._v("，使用"),a("code",[s._v("in")]),s._v("可以有效减少对外查询表循环遍历来提升速度。")]),s._v(" "),a("h2",{attrs:{id:"mysql中int-10-和char-10-的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql中int-10-和char-10-的区别"}},[s._v("#")]),s._v(" MySQL中int(10)和char(10)的区别？")]),s._v(" "),a("p",[s._v("int(10)中的10表示的是显示数据的长度，而char(10)表示的是存储数据的长度。")]),s._v(" "),a("h2",{attrs:{id:"truncate、delete与drop区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#truncate、delete与drop区别"}},[s._v("#")]),s._v(" truncate、delete与drop区别？")]),s._v(" "),a("p",[a("strong",[s._v("相同点：")])]),s._v(" "),a("ol",[a("li",[a("p",[a("code",[s._v("truncate")]),s._v("和不带"),a("code",[s._v("where")]),s._v("子句的"),a("code",[s._v("delete")]),s._v("、以及"),a("code",[s._v("drop")]),s._v("都会删除表内的数据。")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("drop")]),s._v("、"),a("code",[s._v("truncate")]),s._v("都是"),a("code",[s._v("DDL")]),s._v("语句（数据定义语言），执行后会自动提交。")])])]),s._v(" "),a("p",[a("strong",[s._v("不同点：")])]),s._v(" "),a("ol",[a("li",[s._v("truncate 和 delete 只删除数据不删除表的结构；drop 语句将删除表的结构被依赖的约束、触发器、索引；")]),s._v(" "),a("li",[s._v("一般来说，执行速度: drop > truncate > delete。")])]),s._v(" "),a("h2",{attrs:{id:"having和where区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#having和where区别"}},[s._v("#")]),s._v(" having和where区别？")]),s._v(" "),a("ul",[a("li",[s._v("二者作用的对象不同，"),a("code",[s._v("where")]),s._v("子句作用于表和视图，"),a("code",[s._v("having")]),s._v("作用于组。")]),s._v(" "),a("li",[a("code",[s._v("where")]),s._v("在数据分组前进行过滤，"),a("code",[s._v("having")]),s._v("在数据分组后进行过滤。")])]),s._v(" "),a("h2",{attrs:{id:"什么是mysql主从同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是mysql主从同步"}},[s._v("#")]),s._v(" 什么是MySQL主从同步？")]),s._v(" "),a("p",[s._v("主从同步使得数据可以从一个数据库服务器复制到其他服务器上，在复制数据时，一个服务器充当主服务器（"),a("code",[s._v("master")]),s._v("），其余的服务器充当从服务器（"),a("code",[s._v("slave")]),s._v("）。")]),s._v(" "),a("p",[s._v("因为复制是异步进行的，所以从服务器不需要一直连接着主服务器，从服务器甚至可以通过拨号断断续续地连接主服务器。通过配置文件，可以指定复制所有的数据库，某个数据库，甚至是某个数据库上的某个表。")]),s._v(" "),a("h2",{attrs:{id:"为什么要做主从同步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要做主从同步"}},[s._v("#")]),s._v(" 为什么要做主从同步？")]),s._v(" "),a("ol",[a("li",[s._v("读写分离，使数据库能支撑更大的并发。")]),s._v(" "),a("li",[s._v("在主服务器上生成实时数据，而在从服务器上分析这些数据，从而提高主服务器的性能。")]),s._v(" "),a("li",[s._v("数据备份，保证数据的安全。")])]),s._v(" "),a("h2",{attrs:{id:"乐观锁和悲观锁是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁和悲观锁是什么"}},[s._v("#")]),s._v(" 乐观锁和悲观锁是什么？")]),s._v(" "),a("p",[s._v("数据库中的并发控制是确保在多个事务同时存取数据库中同一数据时不破坏事务的隔离性和统一性以及数据库的统一性。乐观锁和悲观锁是并发控制主要采用的技术手段。")]),s._v(" "),a("ul",[a("li",[s._v("悲观锁：假定会发生并发冲突，会对操作的数据进行加锁，直到提交事务，才会释放锁，其他事务才能进行修改。实现方式：使用数据库中的锁机制。")]),s._v(" "),a("li",[s._v("乐观锁：假设不会发生并发冲突，只在提交操作时检查是否数据是否被修改过。给表增加"),a("code",[s._v("version")]),s._v("字段，在修改提交之前检查"),a("code",[s._v("version")]),s._v("与原来取到的"),a("code",[s._v("version")]),s._v("值是否相等，若相等，表示数据没有被修改，可以更新，否则，数据为脏数据，不能更新。实现方式：乐观锁一般使用版本号机制或"),a("code",[s._v("CAS")]),s._v("算法实现。")])]),s._v(" "),a("h2",{attrs:{id:"用过processlist吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用过processlist吗"}},[s._v("#")]),s._v(" 用过processlist吗？")]),s._v(" "),a("p",[a("code",[s._v("show processlist")]),s._v(" 或 "),a("code",[s._v("show full processlist")]),s._v(" 可以查看当前 MySQL 是否有压力，正在运行的"),a("code",[s._v("SQL")]),s._v("，有没有慢"),a("code",[s._v("SQL")]),s._v("正在执行。返回参数如下：")]),s._v(" "),a("ol",[a("li",[a("strong",[s._v("id")]),s._v("：线程ID，可以用"),a("code",[s._v("kill id")]),s._v("杀死某个线程")]),s._v(" "),a("li",[a("strong",[s._v("db")]),s._v("：数据库名称")]),s._v(" "),a("li",[a("strong",[s._v("user")]),s._v("：数据库用户")]),s._v(" "),a("li",[a("strong",[s._v("host")]),s._v("：数据库实例的IP")]),s._v(" "),a("li",[a("strong",[s._v("command")]),s._v("：当前执行的命令，比如"),a("code",[s._v("Sleep")]),s._v("，"),a("code",[s._v("Query")]),s._v("，"),a("code",[s._v("Connect")]),s._v("等")]),s._v(" "),a("li",[a("strong",[s._v("time")]),s._v("：消耗时间，单位秒")]),s._v(" "),a("li",[a("strong",[s._v("state")]),s._v("：执行状态，主要有以下状态：\n"),a("ul",[a("li",[s._v("Sleep，线程正在等待客户端发送新的请求")]),s._v(" "),a("li",[s._v("Locked，线程正在等待锁")]),s._v(" "),a("li",[s._v("Sending data，正在处理"),a("code",[s._v("SELECT")]),s._v("查询的记录，同时把结果发送给客户端")]),s._v(" "),a("li",[s._v("Kill，正在执行"),a("code",[s._v("kill")]),s._v("语句，杀死指定线程")]),s._v(" "),a("li",[s._v("Connect，一个从节点连上了主节点")]),s._v(" "),a("li",[s._v("Quit，线程正在退出")]),s._v(" "),a("li",[s._v("Sorting for group，正在为"),a("code",[s._v("GROUP BY")]),s._v("做排序")]),s._v(" "),a("li",[s._v("Sorting for order，正在为"),a("code",[s._v("ORDER BY")]),s._v("做排序")])])]),s._v(" "),a("li",[a("strong",[s._v("info")]),s._v("：正在执行的"),a("code",[s._v("SQL")]),s._v("语句")])]),s._v(" "),a("h2",{attrs:{id:"mysql查询-limit-1000-10-和limit-10-速度一样快吗"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql查询-limit-1000-10-和limit-10-速度一样快吗"}},[s._v("#")]),s._v(" MySQL查询 limit 1000,10 和limit 10 速度一样快吗？")]),s._v(" "),a("p",[s._v("两种查询方式。对应 "),a("code",[s._v("limit offset, size")]),s._v(" 和 "),a("code",[s._v("limit size")]),s._v(" 两种方式。")]),s._v(" "),a("p",[s._v("而其实 "),a("code",[s._v("limit size")]),s._v(" ，相当于  "),a("code",[s._v("limit 0, size")]),s._v("。也就是从0开始取size条数据。")]),s._v(" "),a("p",[s._v("也就是说，两种方式的"),a("strong",[s._v("区别在于offset是否为0。")])]),s._v(" "),a("p",[s._v("先来看下limit sql的内部执行逻辑。")]),s._v(" "),a("p",[s._v("MySQL内部分为"),a("strong",[s._v("server层")]),s._v("和"),a("strong",[s._v("存储引擎层")]),s._v("。一般情况下存储引擎都用innodb。")]),s._v(" "),a("p",[s._v("server层有很多模块，其中需要关注的是"),a("strong",[s._v("执行器")]),s._v("是用于跟存储引擎打交道的组件。")]),s._v(" "),a("p",[s._v("执行器可以通过调用存储引擎提供的接口，将一行行数据取出，当这些数据完全符合要求（比如满足其他where条件），则会放到"),a("strong",[s._v("结果集")]),s._v("中，最后返回给调用mysql的"),a("strong",[s._v("客户端")]),s._v("。")]),s._v(" "),a("p",[s._v("以主键索引的limit执行过程为例：")]),s._v(" "),a("p",[s._v("执行"),a("code",[s._v("select * from xxx order by id limit 0, 10;")]),s._v("，select后面带的是"),a("strong",[s._v("星号")]),s._v("，也就是要求获得行数据的"),a("strong",[s._v("所有字段信息。")])]),s._v(" "),a("p",[s._v("server层会调用innodb的接口，在innodb里的主键索引中获取到第0到10条"),a("strong",[s._v("完整行数据")]),s._v("，依次返回给server层，并放到server层的结果集中，返回给客户端。")]),s._v(" "),a("p",[s._v("把offset搞大点，比如执行的是："),a("code",[s._v("select * from xxx order by id limit 500000, 10;")])]),s._v(" "),a("p",[s._v("server层会调用innodb的接口，由于这次的offset=500000，会在innodb里的主键索引中获取到第0到（500000 + 10）条"),a("strong",[s._v("完整行数据")]),s._v("，"),a("strong",[s._v("返回给server层之后根据offset的值挨个抛弃，最后只留下最后面的size条")]),s._v("，也就是10条数据，放到server层的结果集中，返回给客户端。")]),s._v(" "),a("p",[s._v("可以看出，当offset非0时，server层会从引擎层获取到"),a("strong",[s._v("很多无用的数据")]),s._v("，而获取的这些无用数据都是要耗时的。")]),s._v(" "),a("p",[s._v("因此，mysql查询中 limit 1000,10 会比 limit 10 更慢。原因是 limit 1000,10 会取出1000+10条数据，并抛弃前1000条，这部分耗时更大。")]),s._v(" "),a("h2",{attrs:{id:"深分页怎么优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#深分页怎么优化"}},[s._v("#")]),s._v(" 深分页怎么优化？")]),s._v(" "),a("p",[s._v("还是以上面的SQL为空："),a("code",[s._v("select * from xxx order by id limit 500000, 10;")])]),s._v(" "),a("p",[a("strong",[s._v("方法一")]),s._v("：")]),s._v(" "),a("p",[s._v("从上面的分析可以看出，当offset非常大时，server层会从引擎层获取到很多无用的数据，而当select后面是*号时，就需要拷贝完整的行信息，"),a("strong",[s._v("拷贝完整数据")]),s._v("相比"),a("strong",[s._v("只拷贝行数据里的其中一两个列字段")]),s._v("更耗费时间。")]),s._v(" "),a("p",[s._v("因为前面的offset条数据最后都是不要的，没有必要拷贝完整字段，所以可以将sql语句修改成：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from xxx  where id >=(select id from xxx order by id limit 500000, 1) order by id limit 10;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("先执行子查询 "),a("code",[s._v("select id from xxx by id limit 500000, 1")]),s._v(", 这个操作，其实也是将在innodb中的主键索引中获取到"),a("code",[s._v("500000+1")]),s._v("条数据，然后server层会抛弃前500000条，只保留最后一条数据的id。")]),s._v(" "),a("p",[s._v("但不同的地方在于，在返回server层的过程中，只会拷贝数据行内的id这一列，而不会拷贝数据行的所有列，当数据量较大时，这部分的耗时还是比较明显的。")]),s._v(" "),a("p",[s._v("在拿到了上面的id之后，假设这个id正好等于500000，那sql就变成了")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from xxx  where id >=500000 order by id limit 10;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("这样innodb再走一次"),a("strong",[s._v("主键索引")]),s._v("，通过B+树快速定位到id=500000的行数据，时间复杂度是lg(n)，然后向后取10条数据。")]),s._v(" "),a("p",[a("strong",[s._v("方法二：")])]),s._v(" "),a("p",[s._v("将所有的数据"),a("strong",[s._v("根据id主键进行排序")]),s._v("，然后分批次取，将当前批次的最大id作为下次筛选的条件进行查询。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("select * from xxx where id > start_id order by id limit 10;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("mysql")]),s._v(" "),a("p",[s._v("通过主键索引，每次定位到start_id的位置，然后往后遍历10个数据，这样不管数据多大，查询性能都较为稳定。")]),s._v(" "),a("h2",{attrs:{id:"高度为3的b-树-可以存放多少数据"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高度为3的b-树-可以存放多少数据"}},[s._v("#")]),s._v(" 高度为3的B+树，可以存放多少数据？")]),s._v(" "),a("p",[s._v("InnoDB存储引擎有自己的最小储存单元——页（Page）。")]),s._v(" "),a("p",[s._v("查询InnoDB页大小的命令如下：")]),s._v(" "),a("div",{staticClass:"language-mysql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("mysql> show global status like 'innodb_page_size';\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| Innodb_page_size | 16384 |\n+------------------+-------+\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("可以看出 innodb 默认的一页大小为 16384B = 16384/1024 = 16kb。")]),s._v(" "),a("p",[s._v("在MySQL中，B+树一个节点的大小设为一页或页的倍数最为合适。因为如果一个节点的大小 < 1页，那么读取这个节点的时候其实读取的还是一页，这样就造成了资源的浪费。")]),s._v(" "),a("p",[s._v("B+树中"),a("strong",[s._v("非叶子节点存的是key + 指针")]),s._v("；"),a("strong",[s._v("叶子节点存的是数据行")]),s._v("。")]),s._v(" "),a("p",[s._v("对于叶子节点，如果一行数据大小为1k，那么一页就能存16条数据。")]),s._v(" "),a("p",[s._v("对于非叶子节点，如果key使用的是bigint，则为8字节，指针在MySQL中为6字节，一共是14字节，则16k能存放 16 * 1024 / 14 = 1170 个索引指针。")]),s._v(" "),a("p",[s._v("于是可以算出，对于一颗高度为2的B+树，根节点存储索引指针节点，那么它有1170个叶子节点存储数据，每个叶子节点可以存储16条数据，一共 1170 x 16 = 18720 条数据。而对于高度为3的B+树，就可以存放 1170 x 1170 x 16 = 21902400 条数据（"),a("strong",[s._v("两千多万条数据")]),s._v("），也就是对于两千多万条的数据，我们只需要"),a("strong",[s._v("高度为3")]),s._v("的B+树就可以完成，通过主键查询只需要3次IO操作就能查到对应数据。")]),s._v(" "),a("p",[s._v("所以在 InnoDB 中B+树高度一般为3层时，就能满足千万级的数据存储。")]),s._v(" "),a("p",[s._v("参考：https://www.cnblogs.com/leefreeman/p/8315844.html")]),s._v(" "),a("h2",{attrs:{id:"mysql单表多大进行分库分表"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mysql单表多大进行分库分表"}},[s._v("#")]),s._v(" MySQL单表多大进行分库分表？")]),s._v(" "),a("p",[s._v("目前主流的有两种说法：")]),s._v(" "),a("ol",[a("li",[s._v("MySQL 单表数据量大于 2000 万行，性能会明显下降，考虑进行分库分表。")]),s._v(" "),a("li",[s._v("阿里巴巴《Java 开发手册》提出单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。")])]),s._v(" "),a("p",[s._v("事实上，这个数值和实际记录的条数无关，而与 MySQL 的配置以及机器的硬件有关。因为MySQL为了提高性能，会将表的索引装载到内存中。在InnoDB buffer size 足够的情况下，其能完成全加载进内存，查询不会有问题。但是，当单表数据库到达某个量级的上限时，导致内存无法存储其索引，使得之后的 SQL 查询会产生磁盘 IO，从而导致性能下降。当然，这个还有具体的表结构的设计有关，最终导致的问题都是内存限制。")]),s._v(" "),a("p",[s._v("因此，对于分库分表，需要结合实际需求，不宜过度设计，在项目一开始不采用分库与分表设计，而是随着业务的增长，在无法继续优化的情况下，再考虑分库与分表提高系统的性能。对此，阿里巴巴《Java 开发手册》补充到：如果预计三年后的数据量根本达不到这个级别，请不要在创建表时就分库分表。")]),s._v(" "),a("p",[s._v("至于MySQL单表多大进行分库分表，应当根据机器资源进行评估。")]),s._v(" "),a("h2",{attrs:{id:"大表查询慢怎么优化"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#大表查询慢怎么优化"}},[s._v("#")]),s._v(" 大表查询慢怎么优化？")]),s._v(" "),a("p",[s._v("某个表有近千万数据，查询比较慢，如何优化？")]),s._v(" "),a("p",[s._v("当MySQL单表记录数过大时，数据库的性能会明显下降，一些常见的优化措施如下：")]),s._v(" "),a("ul",[a("li",[s._v("合理建立索引。在合适的字段上建立索引，例如在WHERE和ORDER BY命令上涉及的列建立索引，可根据EXPLAIN来查看是否用了索引还是全表扫描")]),s._v(" "),a("li",[s._v("建立分区。对关键字段建立水平分区，比如时间字段，若查询条件往往通过时间范围来进行查询，能提升不少性能")]),s._v(" "),a("li",[s._v("利用缓存。利用Redis等缓存热点数据，提高查询效率")]),s._v(" "),a("li",[s._v("限定数据的范围。比如：用户在查询历史信息的时候，可以控制在一个月的时间范围内")]),s._v(" "),a("li",[s._v("读写分离。经典的数据库拆分方案，主库负责写，从库负责读")]),s._v(" "),a("li",[s._v("通过分库分表的方式进行优化，主要有垂直拆分和水平拆分")])]),s._v(" "),a("p",[a("img",{attrs:{src:"http://img.dabin-coder.cn/image/20220612101342.png",alt:""}})])])}),[],!1,null,null,null);t.default=v.exports}}]);