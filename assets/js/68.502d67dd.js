(window.webpackJsonp=window.webpackJsonp||[]).push([[68],{700:function(t,a,s){"use strict";s.r(a);var n=s(14),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"超卖问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#超卖问题"}},[t._v("#")]),t._v(" 超卖问题")]),t._v(" "),s("p",[t._v("先到数据库查询库存，在减库存。不是原子操作，会有超卖问题。")]),t._v(" "),s("p",[t._v("通过加排他锁解决该问题。")]),t._v(" "),s("ul",[s("li",[t._v("开始事务。")]),t._v(" "),s("li",[t._v("查询库存，并显式的设置排他锁：SELECT * FROM table_name WHERE … FOR UPDATE")]),t._v(" "),s("li",[t._v("生成订单。")]),t._v(" "),s("li",[t._v("去库存，update会隐式的设置排他锁：UPDATE products SET count=count-1 WHERE id=1")]),t._v(" "),s("li",[t._v("commit，释放锁。")])]),t._v(" "),s("p",[t._v("也可以通过乐观锁实现。使用版本号实现乐观锁。")]),t._v(" "),s("p",[t._v("假设此时version = 100， num = 1; 100个线程进入到了这里，同时他们select出来版本号都是version = 100。")]),t._v(" "),s("p",[t._v("然后直接update的时候，只有其中一个先update了，同时更新了版本号。")]),t._v(" "),s("p",[t._v("那么其他99个在更新的时候，会发觉version并不等于上次select的version，就说明version被其他线程修改过了，则放弃此次update，重试直到成功。")]),t._v(" "),s("div",{staticClass:"language-mysql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("select version from goods WHERE id= 1001\nupdate goods set num = num - 1, version = version + 1 WHERE id= 1001 AND num > 0 AND version = @version(上面查到的version);\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br")])]),s("h1",{attrs:{id:"秒杀系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#秒杀系统"}},[t._v("#")]),t._v(" 秒杀系统")]),t._v(" "),s("h2",{attrs:{id:"系统的特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#系统的特点"}},[t._v("#")]),t._v(" 系统的特点")]),t._v(" "),s("ul",[s("li",[t._v("高性能：秒杀涉及大量的并发读和并发写，因此支持高并发访问这点非常关键")]),t._v(" "),s("li",[t._v("一致性：秒杀商品减库存的实现方式同样关键，有限数量的商品在同一时刻被很多倍的请求同时来减库存，在大并发更新的过程中都要保证数据的准确性。")]),t._v(" "),s("li",[t._v("高可用：秒杀时会在一瞬间涌入大量的流量，为了避免系统宕机，保证高可用，需要做好流量限制")])]),t._v(" "),s("h2",{attrs:{id:"优化思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优化思路"}},[t._v("#")]),t._v(" 优化思路")]),t._v(" "),s("ul",[s("li",[t._v("后端优化：将请求尽量拦截在系统上游\n"),s("ul",[s("li",[t._v("限流：屏蔽掉无用的流量，允许少部分流量走后端。假设现在库存为 10，有 1000 个购买请求，最终只有 10 个可以成功，99% 的请求都是无效请求")]),t._v(" "),s("li",[t._v("削峰：秒杀请求在时间上高度集中于某一个时间点，瞬时流量容易压垮系统，因此需要对流量进行削峰处理，缓冲瞬时流量，尽量让服务器对资源进行平缓处理")]),t._v(" "),s("li",[t._v("异步：将同步请求转换为异步请求，来提高并发量，本质也是削峰处理。在真实的秒杀场景中，有三个核心流程：而这三个核心流程中，真正并发量大的是秒杀功能，下单和支付功能实际并发量很小。所以，我们在设计秒杀系统时，有必要把下单和支付功能从秒杀的主流程中拆分出来，特别是下单功能要做成mq异步处理的。而支付功能，比如支付宝支付，是业务场景本身保证的异步。")]),t._v(" "),s("li",[t._v("利用缓存：创建订单时，每次都需要先查询判断库存，只有少部分成功的请求才会创建订单，因此可以将商品信息放在缓存中，减少数据库查询")]),t._v(" "),s("li",[t._v("负载均衡：利用 Nginx 做负载均衡，使用多个服务器并发处理请求，减少单个服务器压力")])])]),t._v(" "),s("li",[t._v("前端优化：\n"),s("ul",[s("li",[t._v("限流：使用验证码等，来分散用户的请求")]),t._v(" "),s("li",[t._v("禁止重复提交：限定每个用户发起一次秒杀后，需等待才可以发起另一次请求，从而减少用户的重复请求")]),t._v(" "),s("li",[t._v("本地标记：用户成功秒杀到商品后，将提交按钮置灰，禁止用户再次提交请求")]),t._v(" "),s("li",[t._v("动静分离：使用CDN缓存静态页面资源，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率")])])]),t._v(" "),s("li",[t._v("防作弊优化：\n"),s("ul",[s("li",[t._v("隐藏秒杀接口：如果秒杀地址直接暴露，在秒杀开始前可能会被恶意用户来刷接口，因此需要在没到秒杀开始时间不能获取秒杀接口，只有秒杀开始了，才返回秒杀地址 url 和验证 MD5，用户拿到这两个数据才可以进行秒杀")]),t._v(" "),s("li",[t._v("同一个账号多次发出请求：在前端优化的禁止重复提交可以进行优化；也可以使用 Redis 标志位，每个用户的所有请求都尝试在 Redis 中插入一个 "),s("code",[t._v("userId_secondsKill")]),t._v(" 标志位，成功插入的才可以执行后续的秒杀逻辑，其他被过滤掉，执行完秒杀逻辑后，删除标志位")]),t._v(" "),s("li",[t._v("多个账号一次性发出多个请求：一般这种请求都来自同一个 IP 地址，可以检测 IP 的请求频率，如果过于频繁则弹出一个验证码")]),t._v(" "),s("li",[t._v("多个账号不同 IP 发起不同请求：这种一般都是僵尸账号，检测账号的活跃度或者等级等信息，来进行限制。比如微博抽奖，用 iphone 的年轻女性用户中奖几率更大。通过用户画像限制僵尸号无法参与秒杀或秒杀不能成功")])])])]),t._v(" "),s("h2",{attrs:{id:"参考资料"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://gongfukangee.github.io/2019/06/09/SecondsKill/#%E7%B3%BB%E7%BB%9F%E7%9A%84%E7%89%B9%E7%82%B9",target:"_blank",rel:"noopener noreferrer"}},[t._v("如何设计一个秒杀系统"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.teqng.com/2021/09/07/%E9%9D%A2%E9%9C%B8%EF%BC%9A%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%EF%BC%9F/",target:"_blank",rel:"noopener noreferrer"}},[t._v("秒杀系统如何设计"),s("OutboundLink")],1)]),t._v(" "),s("h1",{attrs:{id:"短链系统"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短链系统"}},[t._v("#")]),t._v(" 短链系统")]),t._v(" "),s("p",[t._v("短链服务的鼻祖是TinyURL，是最早提供短链服务的网站，目前国内也有很多短链服务：新浪（t.cn）、百度（dwz.cn）、腾讯（url.cn）等等。")]),t._v(" "),s("h2",{attrs:{id:"短链的好处"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短链的好处"}},[t._v("#")]),t._v(" 短链的好处")]),t._v(" "),s("ul",[s("li",[t._v("太长的链接容易被限制长度")]),t._v(" "),s("li",[t._v("短链接看着简洁，长链接看着容易懵")]),t._v(" "),s("li",[t._v("安全，不想暴露参数")]),t._v(" "),s("li",[t._v("可以统一链接转换，当然也可以实现统计点击次数等操作")])]),t._v(" "),s("h2",{attrs:{id:"短链的原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短链的原理"}},[t._v("#")]),t._v(" 短链的原理")]),t._v(" "),s("p",[t._v("短链是通过服务器重定向到原始链接实现的。")]),t._v(" "),s("p",[t._v("控制台执行命令"),s("code",[t._v("curl -i http://t.cn/A6ULvJho")]),t._v("，结果如下：")]),t._v(" "),s("div",{staticClass:"language-html line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[t._v("HTTP/1.1 302 Found\nDate: Thu, 30 Jul 2020 13:59:13 GMT\nContent-Type: text/html;charset=UTF-8\nContent-Length: 328\nConnection: keep-alive\nSet-Cookie: aliyungf_tc=AQAAAJuaDFpOdQYARlNadFi502DO2kaj; Path=/; HttpOnly\nServer: nginx\nLocation: https://www.howardliu.cn/how-to-use-branch-efficiently-in-git/index.html??spm=5176.12825654.gzwmvexct.d118.e9392c4aP1UUdv&scm=20140722.2007.2.1989\n\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("HTML")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("HEAD")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("TITLE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Moved Temporarily"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("TITLE")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("HEAD")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("BODY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("BGCOLOR")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("#FFFFFF"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("TEXT")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("#000000"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("H1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("Moved Temporarily"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("H1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\nThe document has moved "),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("A")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("HREF")]),s("span",{pre:!0,attrs:{class:"token attr-value"}},[s("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')]),t._v("https://www.howardliu.cn/how-to-use-branch-efficiently-in-git/index.html??spm=5176.12825654.gzwmvexct.d118.e9392c4aP1UUdv&scm=20140722.2007.2.1989"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v('"')])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("here"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("A")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(".\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("BODY")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token tag"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("HTML")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br")])]),s("p",[t._v("从上面的信息可以看出来，新浪做了 302 跳转，同时为了兼容性，还返回用于手动调整的 HTML 内容。整个交互流程如下：")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://img.dabin-coder.cn/image/20220522153248.png",alt:""}})]),t._v(" "),s("h2",{attrs:{id:"短链生成方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短链生成方式"}},[t._v("#")]),t._v(" 短链生成方式")]),t._v(" "),s("p",[t._v("据统计，目前全球有 58 亿的网页，Java 中 int 取值最多是 2^32 = 4294967296 < 43 亿 < 58 亿，long 取值是 2^64 > 58 亿。所以如果是用数字的话，int 勉强能够支撑（毕竟不是所有网址都会调用短链服务创建短链），使用 long 就比较保险，但会造成空间浪费。")]),t._v(" "),s("p",[t._v("新浪微博使用 8 位字符串表示原始链接，这种字符串可以理解为数字的 62 进制表示，62^8 = 3521614606208 > 3521 亿 > 58 亿，也就是可以解决目前全球已知的网址。62 进制就是由 10 个数字 + (a-z)26 个小写字母 + (A-Z)26 个大写字母组成的数。")]),t._v(" "),s("h3",{attrs:{id:"哈希算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希算法"}},[t._v("#")]),t._v(" 哈希算法")]),t._v(" "),s("p",[t._v("对原始链接取 Hash 值，是一种比较简单的思路。有很多现成的算法可以实现，但是有个避不开的问题就是：Hash 碰撞，所以选一个碰撞率低的算法比较重要。")]),t._v(" "),s("p",[t._v("推荐MurmurHash 算法，这种算法是一种非加密型哈希函数，适用于一般的哈希检索操作，目前 Redis，Memcached，Cassandra，HBase，Lucene 都在用这种算法。")]),t._v(" "),s("p",[t._v("对于碰撞问题，最简单的一种思路是，如果发生碰撞，就给原始 URL 附加上特殊字符串，直到躲开碰撞为止。具体操作如下图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"http://img.dabin-coder.cn/image/20220522154823.png",alt:""}})]),t._v(" "),s("h3",{attrs:{id:"发号器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#发号器"}},[t._v("#")]),t._v(" 发号器")]),t._v(" "),s("p",[t._v("这个就是不管来的是什么，通过集中的统一发号器，分配一个 ID，这个 ID 就是短链的内容，比如第一个来的就是"),s("a",{attrs:{href:"https://xie.infoq.cn/link?target=https%3A%2F%2Ftinyurl.com%2F1",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://tinyurl.com/1"),s("OutboundLink")],1),t._v("，第二个就是"),s("a",{attrs:{href:"https://xie.infoq.cn/link?target=https%3A%2F%2Ftinyurl.com%2F2",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://tinyurl.com/2"),s("OutboundLink")],1),t._v("，以此类推。当然可能一些分布式 ID 算法上来就是很长的一个序号了。为了获取更短路，还可以将其转为 62 进制字符串。")]),t._v(" "),s("ol",[s("li",[t._v("Redis 自增：Redis 性能好，单机就能支撑 10W+请求，如果作为发号器，需要考虑 Redis 持久化和灾备。")]),t._v(" "),s("li",[t._v("MySQL 自增主键：这种方案和 Redis 的方案类似，是利用数据库自增主键的提醒实现，保证 ID 不重复且连续自动创建。")]),t._v(" "),s("li",[t._v("Snowflake：这是一种目前应用比较广的 ID 序列生成算法，美团的 Leaf 是对这种算法的封装升级服务。但是这个算法依赖于服务器时钟，如果有时钟回拨，可能会有 ID 冲突。（有人会较真毫秒中的序列值是这个算法的瓶颈，话说回来了，这个算法只是提供了一种思路，如果觉得序列长度不够，自己加就好，但是每秒百万级的服务真的又这么多吗？）")])]),t._v(" "),s("p",[t._v("对于统一发号器这种方式，还需要解决的一个问题是：如果同一个原始链接，应该返回相同的短链还是不同的短链？")]),t._v(" "),s("p",[t._v("答案是根据用户、地点等维度，相同的原始链接，返回不同的短链。如果判断维度都相同，则返回相同短链。这样做的好处是，我们可以根据短链的点击、请求信息，做数据统计。对于短链，我们牺牲的只是一些存储和运算，但是收集的信息却是无价的。")]),t._v(" "),s("h2",{attrs:{id:"短链存储"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短链存储"}},[t._v("#")]),t._v(" 短链存储")]),t._v(" "),s("p",[t._v("一般这种数据的存储无非就两种：关系型数据库或 NoSQL 数据库。有了上面的创建逻辑，存储就是水到渠成的了。下面给出 MySQL 存储的建表语句：")]),t._v(" "),s("div",{staticClass:"language-mysql line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("CREATE TABLE IF NOT EXISTS tiny_url\n(\n    sid                INT AUTO_INCREMENT PRIMARY KEY,\n    create_time        DATETIME  DEFAULT CURRENT_TIMESTAMP NULL,\n    update_time        TIMESTAMP DEFAULT CURRENT_TIMESTAMP NULL ON UPDATE CURRENT_TIMESTAMP,\n    version            INT       DEFAULT 0                 NULL COMMENT '版本号',\n    tiny_url           VARCHAR(10)                         NULL COMMENT '短链',\n    original_url       TEXT                                NOT NULL COMMENT '原始链接',\n    # 其他附加信息\n    creator_ip         INT       DEFAULT 0                 NOT NULL,\n    creator_user_agent TEXT                                NOT NULL,\n    # 用户其他信息，用于后续统计，对于这些数据，只要存储影响创建短链的必要字段就行，其他的都可以直接发送到数据服务中\n    instance_id        INT       DEFAULT 0                 NOT NULL,\n    # 创建短链服务实例ID\n    state              TINYINT   DEFAULT 1                 NULL COMMENT '-1无效 1有效'\n);\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br")])]),s("h2",{attrs:{id:"短链请求"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#短链请求"}},[t._v("#")]),t._v(" 短链请求")]),t._v(" "),s("p",[t._v("存储完成后，接下来就该使用了。")]),t._v(" "),s("p",[t._v("通常的做法是会根据请求的短链字符串，从存储中找到数据，然后返回 HTTP 重定向到原始地址。如果存储使用关系型数据库，对于短链字段一般需要创建索引，而且为了避免数据库成为瓶颈，数据库前面还会通过缓存铺路。而且为了提高缓存合理使用，一般通过 LRU 算法淘汰非热点短链数据。流程如下：")]),t._v(" "),s("p",[t._v("短链请求 -> 布隆过滤器 -> 缓存 -> 数据库")]),t._v(" "),s("p",[t._v("图中的布隆过滤器是为了防止缓存击穿，造成服务器压力过大。")]),t._v(" "),s("p",[t._v("这里还有一个问题：HTTP 返回重定向编码时使用 301 还是 302，为什么新浪微博会返回 302，而不是更加符合语义的 301 跳转？")]),t._v(" "),s("p",[t._v("来看看HTTP状态码中301和302分别是什么含义：")]),t._v(" "),s("ul",[s("li",[t._v("301，代表永久重定向。也就是说，浏览器第一次请求拿到重定向地址后，以后的请求，都是直接从浏览器缓存中获取重定向地址，不会再请求短链服务。这样可以有效减少服务请求数，降低服务器负载，但是因为后续浏览器不再向后端发送请求，因此获取不到真实的点击数。")]),t._v(" "),s("li",[t._v("302，代表临时重定向。也就是说，每次浏览器都会向服务器发起请求获取新的地址，虽然会给服务器增加压力，但在硬件过剩的今天，这点压力比起数据简直不值一提。所以，302 重定向才是短链服务的首选。")])]),t._v(" "),s("h2",{attrs:{id:"参考链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考链接"}},[t._v("#")]),t._v(" 参考链接")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://www.zhihu.com/question/29270034",target:"_blank",rel:"noopener noreferrer"}},[t._v("短 URL 系统是怎么设计的？"),s("OutboundLink")],1)]),t._v(" "),s("p",[s("a",{attrs:{href:"https://xie.infoq.cn/article/483fcfbe3f942cb1fa9d9ce20",target:"_blank",rel:"noopener noreferrer"}},[t._v("系统设计系列之如何设计一个短链服务"),s("OutboundLink")],1)])])}),[],!1,null,null,null);a.default=e.exports}}]);