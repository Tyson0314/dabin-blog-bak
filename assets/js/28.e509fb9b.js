(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{653:function(s,a,e){"use strict";e.r(a);var n=e(14),r=Object(n.a)({},(function(){var s=this,a=s.$createElement,e=s._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"分组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分组"}},[s._v("#")]),s._v(" 分组")]),s._v(" "),e("p",[s._v("单独地使用group  by没意义，它只能显示出每组记录的第一条记录。")]),s._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("SELECT * FROM orders\nGROUP BY cust_id;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[e("img",{attrs:{src:"http://img.dabin-coder.cn/image/20220530233523.png",alt:""}})]),s._v(" "),e("p",[s._v("除聚集计算语句外，SELECT语句中的每个列都必须在GROUP BY子句中给出。")]),s._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("SELECT vend_id, COUNT(*) AS num_prods #vend_id在GROUP BY子句给出\nFROM products\nGROUP BY vend_id;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("GROUP BY子句必须出现在WHERE子句之后，ORDER BY子句之前。")]),s._v(" "),e("h2",{attrs:{id:"过滤分组"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#过滤分组"}},[s._v("#")]),s._v(" 过滤分组")]),s._v(" "),e("p",[s._v("having 用来分组查询后指定一些条件来输出查询结果，having作用和where类似，但是having只能用在group  by场合，并且必须位于group  by之后order  by之前。")]),s._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("SELECT cust_id, COUNT(*) AS orders\nFROM orders\nGROUP BY cust_id\nHAVING COUNT(*) >= 2;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br")])]),e("h2",{attrs:{id:"having和where区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#having和where区别"}},[s._v("#")]),s._v(" having和where区别")]),s._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("SELECT cust_id FROM orders GROUP BY cust_id HAVING COUNT(cust_id) >= 2;\nSELECT cust_id FROM orders GROUP BY cust_id WHERE COUNT(cust_id) >= 2; #Error Code : 1064\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[s._v("第一个sql语句可以执行，但是第二个会报错。")]),s._v(" "),e("ul",[e("li",[e("p",[s._v("WHERE子句不起作用，因为过滤是基于分组聚集值而不是特定行值的。")])]),s._v(" "),e("li",[e("p",[s._v("二者作用的对象不同，where子句作用于表和视图，having作用于组。")])]),s._v(" "),e("li",[e("p",[s._v("WHERE在数据分组前进行过滤，HAVING在数据分组后进行过滤。")])])]),s._v(" "),e("div",{staticClass:"language-mysql line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("SELECT vend_id, COUNT(*) AS num_prods\nFROM products\nWHERE prod_price >= 10\nGROUP BY vend_id\nHAVING COUNT(*) >= 2;\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("WHERE子句过滤所有prod_price至少为10的行。然后按vend_id分组数据，HAVING子句过滤计数为2或2以上的分组。")])])}),[],!1,null,null,null);a.default=r.exports}}]);